<?phpclass BMEAPI{	var $version = "1.0";	var $errorMessage;	var $errorCode;	var $apiUrl;	var $timeout = 300;	var $chunkSize = 8192;	var $apiToken;	/**     * Connect to the Benchmark Email API for a given list. All BMEAPI calls require login before functioning     *     * @param string $username Your Benchmark Email login user name - always required     * @param string $password Your Benchmark Email login password - always required     */	function BMEAPI($username, $password, $apiURL)	{		$this->apiUrl = parse_url($apiURL . "/?output=php");		if(isset($GLOBALS["bme_api_token"]) && $GLOBALS["bme_api_token"] != "")		{			$this->apiToken = $GLOBALS["bme_api_token"];		}		else		{			$this->apiToken = $this->invokeMethod("login", array(				"username" => $username,				"password" => $password			));			$GLOBALS["bme_api_token"] = $this->apiToken;		}	}	/**    * Create a new Subaccount based on the details provided    *    * @section Account management methods    *    * @example bmeapi_subAccountCreate.php    *    * @param Array $accountstruct The array containing the email details.    *  Array Structure    *  string email      - Email ID of the Subaccount    *  string firstname  - Firstname of the Subaccount    *  string lastname   - Lastname of the Subaccount    *  string login      - Login of the Subaccount    *  string password   - Password of the Subaccount    *  string phone      - Phone No. of the Subaccount    * @return int        -1 if the creation process failed.    */	function subAccountCreate($accountstruct)	{		$params = array();		$params["accountstruct"] = $accountstruct;		return $this->invokeMethod("subaccountcreate", $params);	}	/**    * Update Subaccount details    *    * @section Account management methods    *    * @example bmeapi_subAccountUpdate.php    *    * @param Array $accountstruct The array containing the email details.    *  Array Structure    *  string email      - Email ID of the Subaccount    *  string firstname  - Firstname of the Subaccount    *  string lastname   - Lastname of the Subaccount    *  string login      - Login of the Subaccount    *  string password   - Password of the Subaccount    *  string phone      - Phone No. of the Subaccount    *  string clientid   - Client ID of the Subaccount, this can be obtain by using the subAccountGetList method    * @return int        -1 if the updation process failed.    */	function subaccountupdate($accountstruct)	{		$params = array();		$params["accountstruct"] = $accountstruct;		return $this->invokeMethod("subaccountupdate", $params);	}	/**    * Get the list of SubAccounts    *    * @section Account management methods    *    * @example subAccountGetList.php    * @return array Returns an array with the results.    * Return Array Structure    * string clientid         - ClientID of the Subaccount.You can use the subaccountupdate method to update this    * string login            - Login of the Subaccount    * string firstname        - Firstname of the Subaccount    * string lastname         - Lastname of the Subaccount    * string plan_email_limit - Volume allocated    * string free_mail_sent   - Volume used    * string active           - Status of the Subaccount    */	function subAccountGetList()	{		$params = array();		return $this->invokeMethod("subaccountgetlist", $params);	}	/**    * Update the status of the Subaccount.    *    * @section Account management methods    *    * @example bmeapi_subAccountUpdateStatus.php    *    * @param string $id The ClientID of the Subaccount for which you need to update the status, you can obtain this by using the subAccountGetList() method.    * @param string $status The status of the Subaccount, this should be either 0 or 1 .    */	function subAccountUpdateStatus($id, $status)	{		$params = array();		$params["id"] = $id;		$params["status"] = $status;		return $this->invokeMethod("subaccountupdatestatus", $params);	}	/**     * Internal function - proxy method for certain XML-RPC calls     * @param mixed Method to call, with any parameters to pass along     * @return mixed the result of the call     */	function invoke()	{		$params = array();		return $this->invokeMethod("invoke", $params);	}	/**     * Connect to the server and invoke the requested methods, parsing the result     */	function invokeMethod($method, $params)	{		if($method != "login")		{			if(! array_key_exists("token", $params))			{				$params["token"] = $this->apiToken;			}		}		$post_vars = $this->httpBuildQuery($params);		$content = "POST " . $this->apiUrl["path"] . "?" . $this->apiUrl["query"] . "&method=" . $method . " HTTP/1.0\r\n";		$content .= "Host: " . $this->apiUrl["host"] . "\r\n";		$content .= "User-Agent: BMEAPI/" . $this->version . "\r\n";		$content .= "Content-type: application/x-www-form-urlencoded\r\n";		$content .= "Content-length: " . strlen($post_vars) . "\r\n";		$content .= "Connection: close \r\n\r\n";		$content .= $post_vars;// 		if($_GET["debug"] == "1")// 		{// 			echo $content;// 		}		ob_start();		$sock = fsockopen($this->apiUrl["host"], 80, $errno, $errstr, $this->timeout);		if(! $sock)		{			$this->errorMessage = "Could not connect (ERR $errno: $errstr)";			$this->errorCode = "-1";			ob_end_clean();			return false;		}		$response = "";		fwrite($sock, $content);		while(! feof($sock))		{			$response .= fread($sock, $this->chunkSize);		}		fclose($sock);		ob_end_clean();// 		if($_GET["debug"] == "1")// 		{// 			echo "<br />" . $response;// 		}		list($throw, $response) = explode("\r\n\r\n", $response, 2);		if(ini_get("magic_quotes_runtime")) $response = stripslashes($response);		$serial = unserialize($response);		if($response && $serial === false)		{			$response = array(				"error" => "Error : " . $response,				"code" => "-2"			);		}		else		{			$response = $serial;		}		if(is_array($response) && isset($response["error"]))		{			$this->errorMessage = $response["error"];			$this->errorCode = $response["code"];			return false;		}		return $response;	}	/**     * Re-implement http_build_query for systems that do not already have it     */	function httpBuildQuery($params, $key = null)	{		$ret = array();		foreach((array)$params as $name => $val)		{			$name = urlencode($name);			if($key !== null)			{				$name = $key . "[" . $name . "]";			}			if(is_array($val) || is_object($val))			{				$ret[] = $this->httpBuildQuery($val, $name);			}			elseif($val !== null)			{				$ret[] = $name . "=" . urlencode($val);			}		}		return implode("&", $ret);	}	/**    * Duplicate an existing Email and return the ID of the newly created Email.    *   The new email will have the same subject, content, target list as the one being copied.    *   The newly created email will be saved with the status 'Incomplete'.    *    * @section Email Campaign Related Methods    *    * @example bmeapi_emailCopy.php    *    * @param string $emailID The email ID to copy. To get all the emails, use the emailGet method.    * @return string Returns the email ID of the newly created email campaign.    */	function emailCopy($emailID)	{		$params = array();		$params["emailID"] = $emailID;		return $this->invokeMethod("emailCopy", $params);	}	/**    * Create a new Email based on the details provided. Return the ID of the newly created Email.    *    * @section Email Campaign Related Methods    *    * @example bmeapi_emailCreate.php    *    * @param Array $emailDetails The array containing the email details.    * Array Structure    *  string fromName - Name displayed as "from" in your contact's in-box    *  string fromEmail -  Email displayed as "from address" in your contact's in-box    *  string emailName -  For your personal use; not displayed in your email    *  string replyEmail - Replies are forwarded to this address    *  string subject -  Subject line of your email    *  string templateContent -  The content of email    *  integer toListID  - The contact list ID to whom this campaign is to be sent to. You can get the contact lists from listGet    *  string us_address - optional. The Address line in case of a US based sender. Defaults to address information provided in the Client Settings    *  string us_state - optional. The State in case of a US based sender. Defaults to address information provided in the Client Settings    *  string us_city -  optional. The City in case of a US based sender. Defaults to address information provided in the Client Settings    *  string us_zip - optional. The Zip Code in case of a US based sender. Defaults to address information provided in the Client Settings    *  string intl_address - optional. The Zip Code in case of a non-US based sender. Defaults to address information provided in the Client Settings    *  bool webpageVersion - optional. Include a link to view a web version of the email. Defaults to false.    *  string permissionReminderMessage -  optional. A Permission reminder which appears on top of the email. Defaults to blank.    *  string googleAnalyticsCampaign -  optional. The Google Analytics campaign name. If provided, all links in the email will be enabled for tracking by Google Analytics. Defaults to blank.    *  string scheduleDate - optional. The date on which the campaign is to be delivered. Defaults to 'Draft'.    * @return string Returns the email ID of the newly created email campaign.    */	function emailCreate($emailDetails)	{		$params = array();		$params["emailDetails"] = $emailDetails;		return $this->invokeMethod("emailCreate", $params);	}	/**    * Create a new rss Email based on the details provided. Return the ID of the newly created Email.    *    * @section Email Campaign Related Methods    *    * @example bmeapi_emailRssCreate.php    *    * @param Array $emailDetails The array containing the email details.    * Array Structure    *  string fromName - Name displayed as "from" in your contact's in-box    *  string fromEmail -  Email displayed as "from address" in your contact's in-box    *  string emailName -  For your personal use; not displayed in your email    *  string replyEmail - Replies are forwarded to this address    *  string subject -  Subject line of your email    *  string templateContent -  The content of email	   string rssurl - The url for rss feed    *  integer toListID  - The contact list ID to whom this campaign is to be sent to. You can get the contact lists from listGet    *  string us_address - optional. The Address line in case of a US based sender. Defaults to address information provided in the Client Settings    *  string us_state - optional. The State in case of a US based sender. Defaults to address information provided in the Client Settings    *  string us_city -  optional. The City in case of a US based sender. Defaults to address information provided in the Client Settings    *  string us_zip - optional. The Zip Code in case of a US based sender. Defaults to address information provided in the Client Settings    *  string intl_address - optional. The Zip Code in case of a non-US based sender. Defaults to address information provided in the Client Settings    *  bool webpageVersion - optional. Include a link to view a web version of the email. Defaults to false.    *  string permissionReminderMessage -  optional. A Permission reminder which appears on top of the email. Defaults to blank.    *  string googleAnalyticsCampaign -  optional. The Google Analytics campaign name. If provided, all links in the email will be enabled for tracking by Google Analytics. Defaults to blank.    *  string scheduleDate - optional. The date on which the campaign is to be delivered. Defaults to 'Draft'.    *  string rssinterval   - optional. Interval for rss campaign, default value is 0 , accepted values are 1 , 7 , 30.    * @return string Returns the email ID of the newly created email campaign.    */	function emailRssCreate($emailDetails)	{		$params = array();		$params["emailDetails"] = $emailDetails;		return $this->invokeMethod("emailRssCreate", $params);	}	/**    * Delete the Email for given ID. Returns true if the email was deleted.    *    * @section Email Campaign Related Methods    *    * @example bmeapi_emailDelete.php    *    * @param string $emailID The email ID to delete. To get all the emails, use the emailGet method.    * @return bool Returns true if the campaign was deleted.    */	function emailDelete($emailID)	{		$params = array();		$params["emailID"] = $emailID;		return $this->invokeMethod("emailDelete", $params);	}	/**    * Get the list of emails using the filter and paging limits, order by the name or date of the email.    *    * @section Email Campaign Related Methods    *    * @example bmeapi_emailGet.php    *    * @param string $filter Show emails where the email name starts with the filter    * @param string $status Fetch emails matching a status(-1 = All, 0 = Draft, 1 = Scheduled, 2 = Sent)    * @param integer $pageNumber  Fetch results from the given page number.    * @param integer $pageSize  Number of results per page.    * @param string $orderBy  Sort the results based on "name" or "date".    * @param string $sortOrder  Sort the results in the "asc"ending or "desc"ending order.    * @return array Returns an array with the results.    * Return Array Structure    * integer sequence - The sequence number of the record    * string id - The ID of the email campaign. To get the details of this campaign, use the emailGetDetail method.    * string emailName - Name of the email campaign    * string fromName - The from name that appears in the recipients inbox    * string subject - The subject line of the email    * integer toListID - The ID of the target contact list    * string toListName - The name of the target contact list    * string status - The status of the email. Can be 'Draft', 'Scheduled', 'Sent', 'Incomplete'    * string createdDate - The date on which the list was created    * string modifiedDate - The date on which the list was last updated    */	function emailGet($filter, $status, $pageNumber, $pageSize, $orderBy, $sortOrder)	{		$params = array();		$params["filter"] = $filter;		$params["status"] = $status;		$params["pageNumber"] = $pageNumber;		$params["pageSize"] = $pageSize;		$params["orderBy"] = $orderBy;		$params["sortOrder"] = $sortOrder;		return $this->invokeMethod("emailGet", $params);	}	/**    * Get the list of emails using the filter and paging limits, order by the name or date of the email.    *    * @section Email Campaign Related Methods    *    * @example bmeapi_emailRssGet.php    *    * @param string $filter Show emails where the email name starts with the filter    * @param string $status Fetch emails matching a status(-1 = All, 0 = Draft, 1 = Scheduled, 2 = Sent)    * @param integer $pageNumber  Fetch results from the given page number.    * @param integer $pageSize  Number of results per page.    * @param string $orderBy  Sort the results based on "name" or "date".    * @param string $sortOrder  Sort the results in the "asc"ending or "desc"ending order.    * @return array Returns an array with the results.    * Return Array Structure    * integer sequence - The sequence number of the record    * string id - The ID of the email campaign. To get the details of this campaign, use the emailGetDetail method.    * string emailName - Name of the email campaign    * string fromName - The from name that appears in the recipients inbox    * string subject - The subject line of the email    * integer toListID - The ID of the target contact list    * string toListName - The name of the target contact list    * string status - The status of the email. Can be 'Draft', 'Scheduled', 'Sent', 'Incomplete'    * string createdDate - The date on which the list was created    * string modifiedDate - The date on which the list was last updated    */	function emailRssGet($filter, $pageNumber, $pageSize, $orderBy, $sortOrder)	{		$params = array();		$params["filter"] = $filter;		$params["pageNumber"] = $pageNumber;		$params["pageSize"] = $pageSize;		$params["orderBy"] = $orderBy;		$params["sortOrder"] = $sortOrder;		return $this->invokeMethod("emailRssGet", $params);	}	/**    * Get all the details for given Email ID.    *    * @section Email Campaign Related Methods    *    * @example bmeapi_emailGetDetail.php    *    * @param string $emailID The email ID to get. To get all the emails, use the emailGet method.    * @return array Returns an array with the results.    * Return Array Structure    * integer sequence - The sequence number of the record    * string id - The ID of the email campaign. To get the details of this campaign, use the emailGetDetail method.    * string emailName - Name of the email campaign    * string fromName - The from name that appears in the recipients inbox    * string fromEmail -  Email displayed as "from address" in your contact's in-box    * string replyEmail - Replies are forwarded to this address    * string subject - The subject line of the email    * integer toListID - The ID of the target contact list    * string toListName - The name of the target contact list    * bool isSegment -  Returns true if a segment has been used as the target    * string templateContent -  The HTML content of the email    * string templateText - The Text version of the email    * string us_address -The Address line in case of a US based sender.    * string us_state - The State in case of a US based sender.    * string us_city -  The City in case of a US based sender.    * string us_zip - The Zip Code in case of a US based sender. Defaults to address information provided in the Client Settings    * string intl_address - The Address line in case of Outside US-based sender    * bool webpageVersion - Returns true if a link to view a web version of the email has been set    * string permissionReminderMessage -  The Permission reminder which appears on top of the email.    * string googleAnalyticsCampaign -  The Google Analytics campaign name.    * string status - The status of the email. Can be 'Draft', 'Scheduled', 'Sent', 'Incomplete'    * string createdDate - The date on which the email was created    * string modifiedDate - The date on which the email was last updated    */	function emailGetDetail($emailID)	{		$params = array();		$params["emailID"] = $emailID;		return $this->invokeMethod("emailGetDetail", $params);	}	/**    * Get all the details for given rss Email ID.    *    * @section Email Campaign Related Methods    *    * @example bmeapi_emailRssGetDetail.php    *    * @param string $emailID The email ID to get. To get all the emails, use the emailGet method.    * @return array Returns an array with the results.    * Return Array Structure    * integer sequence - The sequence number of the record    * string id - The ID of the email campaign. To get the details of this campaign, use the emailGetDetail method.    * string emailName - Name of the email campaign    * string fromName - The from name that appears in the recipients inbox    * string fromEmail -  Email displayed as "from address" in your contact's in-box    * string replyEmail - Replies are forwarded to this address    * string subject - The subject line of the email    * integer toListID - The ID of the target contact list    * string toListName - The name of the target contact list    * bool isSegment -  Returns true if a segment has been used as the target    * string templateContent -  The HTML content of the email    * string templateText - The Text version of the email    * string us_address -The Address line in case of a US based sender.    * string us_state - The State in case of a US based sender.    * string us_city -  The City in case of a US based sender.    * string us_zip - The Zip Code in case of a US based sender. Defaults to address information provided in the Client Settings    * string intl_address - The Address line in case of Outside US-based sender    * bool webpageVersion - Returns true if a link to view a web version of the email has been set    * string permissionReminderMessage -  The Permission reminder which appears on top of the email.    * string googleAnalyticsCampaign -  The Google Analytics campaign name.    * string status - The status of the email. Can be 'Draft', 'Scheduled', 'Sent', 'Incomplete'    * string createdDate - The date on which the email was created    * string modifiedDate - The date on which the email was last updated    * string rssurl - The url for rss feeds	* string rssinterval - The interval for the rss campaign    */	function emailRssGetDetail($emailID)	{		$params = array();		$params["emailID"] = $emailID;		return $this->invokeMethod("emailGetDetail", $params);	}	/**    * Schedule an email for delivery for the given date time.    *    * @section Email Campaign Related Methods    *    * @example bmeapi_emailSchedule.php    *    * @param string $emailID The ID of the email campaign to schedule. To get all the emails, use the emailGet method.    * @param string $scheduleDate The future date on which the email campaign is to be sent.    * @return bool Returns true if the email campaign was successfully scheduled.    */	function emailSchedule($emailID, $scheduleDate)	{		$params = array();		$params["emailID"] = $emailID;		$params["scheduleDate"] = $scheduleDate;		return $this->invokeMethod("emailSchedule", $params);	}	/**    * Schedule an email for delivery for the given date time.    *    * @section Email Campaign Related Methods    *    * @example bmeapi_emailRssSchedule.php    *    * @param string $emailID The ID of the rss email campaign to schedule. To get all the emails, use the emailGet method.    * @param string $scheduleDate The future date on which the rss email campaign will start    * @param string $interval The interval in  days on which the campaign will be sent, default valid values are 1 , 7 and 30.    * @return bool Returns true if the email campaign was successfully scheduled.    */	function emailRssSchedule($emailID, $scheduleDate, $interval)	{		$params = array();		$params["emailID"] = $emailID;		$params["scheduleDate"] = $scheduleDate;		$params["interval"] = $interval;		return $this->invokeMethod("emailRssSchedule", $params);	}	/**    * Schedule an email for immediate delivery.    *    * @section Email Campaign Related Methods    *    * @example bmeapi_emailSendNow.php    *    * @param string $emailID The ID of the email campaign to schedule. To get all the emails, use the emailGet method.    * @return bool Returns true if the email campaign was successfully scheduled for immediate delivery.    */	function emailSendNow($emailID)	{		$params = array();		$params["emailID"] = $emailID;		return $this->invokeMethod("emailSendNow", $params);	}	/**    * Send a test email for the given Email ID    *    * @section Email Campaign Related Methods    *    * @example bmeapi_emailSendTest.php    *    * @param string $emailID The ID of the email campaign to schedule. To get all the emails, use the emailGet method.    * @param string $testEmail The email address to which the email campaign is to be sent as a test.    * @return bool Returns true if the email campaign was successfully sent to the test email address.    */	function emailSendTest($emailID, $testEmail)	{		$params = array();		$params["emailID"] = $emailID;		$params["testEmail"] = $testEmail;		return $this->invokeMethod("emailSendTest", $params);	}	/**    * Set an email as draft. This would clear its delivery schedule.    *    * @section Email Campaign Related Methods    *    * @example bmeapi_emailUnSchedule.php    *    * @param string $emailID The ID of the email campaign to unschedule. To get all the emails, use the emailGet method.    * @return bool Returns true if the email campaign was successfully unscheduled.    */	function emailUnSchedule($emailID)	{		$params = array();		$params["emailID"] = $emailID;		return $this->invokeMethod("emailUnSchedule", $params);	}	/**    * Resend an email campaign to contacts that were added since the campaign was last sent.    *    * @section Email Campaign Related Methods    *    * @example bmeapi_emailResend.php    *    * @param string $emailID The ID of the email campaign to resend. To get all the emails, use the emailGet method.    * @param string $scheduleDate - the date when the campaign will be resent.    * @return bool Returns true if the email campaign was successfully Resent.    */	function emailResend($emailID, $scheduleDate)	{		$params = array();		$params["emailID"] = $emailID;		$params["scheduleDate"] = $scheduleDate;		return $this->invokeMethod("emailResend", $params);	}	/**    * Resend an email campaign to list of email addresses    *    * @section Email Campaign Related Methods    *    * @example bmeapi_emailQuickSend.php    *    * @param string $emailID The ID of the email campaign to which the list will be sent. To get all the emails, use the emailGet method.    * @param string $ListName - the name of the list where the contacts will be stored.	* @param Array Structure $emails    *  string email - The email address    * @param string $scheduleDate - the date when the campaign will be quicksent.    * @return bool Returns true if the email campaign was successfully quicksent.    */	function emailQuickSend($emailID, $ListName, $emails, $scheduleDate)	{		$params = array();		$params["emailID"] = $emailID;		$params["ListName"] = $ListName;		$params["emails"] = $emails;		$params["scheduleDate"] = $scheduleDate;		return $this->invokeMethod("emailQuickSend", $params);	}	/**    * Create a new Autoresponder based on the details provided. Return the ID of the newly created Autoresponder.    *    * @section Email Campaign Related Methods    *    * @example bmeapi_autoresponderCreate.php	*  @param Array Structure $Autoresponder    *  string autoresponderName    - Name of the autoresponder    *  string contactListID        - Id of the contact list or segment that will be associated with this autoresponder	*  bool isSegment              - Whether a segment is associated with this autoresponder    *  string fromName             - From name used for the autoresponder campaign    *  string fromEmail            - From email address    *  bool   permissionReminder   - Whether the permission reminder text would be sent in the mail.    *  string permissionReminderMessage  - The actual permission reminder message    *  bool webpageVersion - Returns true if a link to view a web version of the email has been set    * @return Returns the ID of the newly created Autoresponder..    */	function autoresponderCreate($Autoresponder)	{		$params = array();		$params["Autoresponder"] = $Autoresponder;		return $this->invokeMethod("autoresponderCreate", $params);	}	/**    * Update an Autoresponder based on the details provided.    *    * @section Email Campaign Related Methods    *    *  @example bmeapi_autoresponderUpdate.php	*  @param string $autoresponderID The Autoresponder ID which needs to be updated.    *  @param string $status       0 for decativating and 1 for activation	*  @param Array Structure $Autoresponder    *  string autoresponderName    - Name of the autoresponder    *  string fromName             - From name used for the autoresponder campaign    *  string fromEmail            - From email address    *  bool   permissionReminder   - Whether the permission reminder text would be sent in the mail.    *  string permissionReminderMessage  - The actual permission reminder message    *  bool webpageVersion - Returns true if a link to view a web version of the email has been set    * @return Returns true if the update is successful.    */	function autoresponderUpdate($autoresponderID, $status, $Autoresponder)	{		$params = array();		$params["autoresponderID"] = $autoresponderID;		$params["status"] = $status;		$params["Autoresponder"] = $Autoresponder;		return $this->invokeMethod("autoresponderUpdate", $params);	}	/**    * Delete the Autoresponder for given ID. Returns true if the Autoresponder was deleted.    *    * @section Email Campaign Related Methods    *    * @example bmeapi_autoresponderDelete.php    *    * @param string $autoresponderID The Autoresponder ID to delete. To get all the Autoresponders, use the autoresponderGetList method.    * @return bool Returns true if the autoresponder campaign was deleted.    */	function autoresponderDelete($autoresponderID)	{		$params = array();		$params["autoresponderID"] = $autoresponderID;		return $this->invokeMethod("autoresponderDelete", $params);	}	/**    * Create Autoresponder email template and Returns the ID of the newly created Autoresponder email template    *    * @section Email Campaign Related Methods    *    * @example bmeapi_autoresponderDetailCreate.php    * @param string $autoresponderID The Autoresponder ID for which we are adding the email.	*  @param Array Structure $AutoresponderDetail    *  string subject - The subject line of the email    *  string templateContent -  The HTML content of the email    *  string templateText - The Text version of the email    *  string us_address -The Address line in case of a US based sender.    *  string us_state - The State in case of a US based sender.    *  string us_city -  The City in case of a US based sender.    *  string us_zip - The Zip Code in case of a US based sender. Defaults to address information provided in the Client Settings    *  string intl_address - The Address line in case of Outside US-based sender    *  string type - type of the autoresponder -   valid values are 'one off email' , 'annual email' , 'new subscriber email'	*  string days - no of days after the date of the creation of the Autoresponder when the email is to be sent to the list    *  string whentosend - when to send the autoresponder  valid values are 'after' , 'before', ignore if this is not applicable    *  string fieldtocompare - Label of the datecolumn which is used as a reference for 'annual email' or 'one off email' , ignore if this is not applicable    * @return Returns the ID of the newly created Autoresponder email template.    */	function autoresponderDetailCreate($autoresponderID, $AutoresponderDetail)	{		$params = array();		$params["autoresponderID"] = $autoresponderID;		$params["AutoresponderDetail"] = $AutoresponderDetail;		return $this->invokeMethod("autoresponderDetailCreate", $params);	}	/**    * Delete the delete the autoresponder email whose id has been specified    *    * @section Email Campaign Related Methods    *    * @example bmeapi_autoresponderDetailDelete.php    *    * @param string $autoresponderID The Autoresponder ID to delete. To get all the Autoresponders, use the autoresponderGetList method.    * @param string $autoresponderDetailID The detail id of the autoresponder that needs to be deleted    * @return bool Returns true if the autoresponder campaign was deleted.    */	function autoresponderDetailDelete($autoresponderID, $autoresponderDetailID)	{		$params = array();		$params["autoresponderID"] = $autoresponderID;		$params["autoresponderDetailID"] = $autoresponderDetailID;		return $this->invokeMethod("autoresponderDetailDelete", $params);	}	/**	    * Delete the Detail history of the autoresponder email whose id has been specified	    *	    * @section Email Campaign Related Methods	    *	    * @example bmeapi_autoresponderDetailHistoryDelete.php	    *	    * @param string $autoresponderID The Autoresponder ID of which the history is to delete. To get all the Autoresponders, use the autoresponderGetList method.	    * @param string $autoresponderDetailID The detail id of the autoresponder which history needs to be deleted	    * @param string $email email which history is to delete	    * @return bool Returns true if the autoresponder campaign was deleted.	    */	function autoresponderDetailHistoryDelete($autoresponderID, $autoresponderDetailID, $email)	{		$params = array();		$params["autoresponderID"] = $autoresponderID;		$params["autoresponderDetailID"] = $autoresponderDetailID;		$params["email"] = $email;		return $this->invokeMethod("autoresponderDetailHistoryDelete", $params);	}	/* get the details of the autoresponder whose id has been specified    *    * @section Email Campaign Related Methods    *    * @example bmeapi_autoresponderGetDetail.php    *    * @param string $autoresponderID The autoresponder ID to get. To get all the autoresponders, use the autoresponderGetList method.    * @return array Returns an array with the results.    * Return Array Structure    * integer sequence - The sequence number of the record    * string id - The ID of the autoresponder campaign.    * string autoresponderName - Name of the autoresponder campaign    * string totalEmails       - no of email templates associated with this autoresponder    * string fromName - The from name that appears in the recipients inbox    * string fromEmail -  Email displayed as "from address" in your contact's in-box    * string status  - Status of the autoresponder    * string contactListID  - The ID of the  contact list    * string contactListName - The name of the  contact list    * bool   isSegment -  Returns true if a segment has been used as the target    * bool   webpageVersion - Returns true if a link to view a web version of the email has been set    * string permissionReminderMessage -  The Permission reminder which appears on top of the email.    * string createdDate - The date on which the email was created    * string modifiedDate - The date on which the email was last updated	* Array  emails - array of email templates that are associated with the autoresponder	  each element of the string array emails has an associated array  with the following elements	   *  string autoresponderDetailID - The id of the autoresponder email	   *  string subject               - The subject of the autoresponder email       *  string type - type of the autoresponder -   valid values are 'one off email' , 'annual email' , 'new subscriber email'	   *  string days - no of days after the date of the creation of the Autoresponder when the email is to be sent to the list       *  string whentosend - when to send the autoresponder  valid values are 'after' , 'before', ignore if this is not applicable       *  string fieldtocompare - Label of the datecolumn which is used as a reference for 'annual email' or 'one off email' , ignore if this is not applicable    */	function autoresponderGetDetail($autoresponderID)	{		$params = array();		$params["autoresponderID"] = $autoresponderID;		return $this->invokeMethod("autoresponderGetDetail", $params);	}	/* Get all the details for given AutoresponderID and its coresponding Autoresponder email template .    *    * @section Email Campaign Related Methods    *    * @example bmeapi_autoresponderGetEmailDetail.php    *    * @param string $autoresponderID The autoresponder ID to get. To get all the autoresponders, use the autoresponderGetList method.    * @param string $autoresponderDetailID The ID of the autoresponder email template    * @return array Returns an array with the results.    * Return Array Structure    * integer sequence - The sequence number of the record    * string id - The ID of the email campaign. To get the details of this campaign, use the emailGetDetail method.    * string emailName - Name of the email campaign    * string fromName - The from name that appears in the recipients inbox    * string fromEmail -  Email displayed as "from address" in your contact's in-box    * string replyEmail - Replies are forwarded to this address    * string subject - The subject line of the email    * integer toListID - The ID of the target contact list    * string toListName - The name of the target contact list    * string templateContent -  The HTML content of the email    * string templateText - The Text version of the email    * string us_address -The Address line in case of a US based sender.    * string us_state - The State in case of a US based sender.    * string us_city -  The City in case of a US based sender.    * string us_zip - The Zip Code in case of a US based sender. Defaults to address information provided in the Client Settings    * string intl_address - The Address line in case of Outside US-based sender    * bool webpageVersion - Returns true if a link to view a web version of the email has been set    * string permissionReminderMessage -  The Permission reminder which appears on top of the email.    * string createdDate - The date on which the email was created    * string modifiedDate - The date on which the email was last updated    */	function autoresponderGetEmailDetail($autoresponderID, $autoresponderDetailID)	{		$params = array();		$params["autoresponderID"] = $autoresponderID;		$params["autoresponderDetailID"] = $autoresponderDetailID;		return $this->invokeMethod("autoresponderGetEmailDetail", $params);	}	/*   * @example bmeapi_autoresponderGetList.php    *    * @param string $filter Show emails where the email name starts with the filter    * @param integer $pageNumber  Fetch results from the given page number.    * @param integer $pageSize  Number of results per page.    * @param string $orderBy  Sort the results based on "name" or "date".    * @param string $sortOrder  Sort the results in the "asc"ending or "desc"ending order.    * @return array Returns an array with the results.    * Return Array Structure    * integer  sequence - The sequence number of the record    * string  id - The ID of the autoresponder campaign    * string  autoresponderName - Name of the autoresponder campaign    * string  totalEmails - The no of emails associated with the autoresponder    * string  status - The status of the autoresponder campaign, 1 if its activated, 0 if it is otherwise    * string  modifiedDate - The date on which the Autoresponder was modified    */	function autoresponderGetList($pageNumber, $pageSize, $orderBy, $filter, $sortOrder)	{		$params = array();		$params["filter"] = $filter;		$params["pageNumber"] = $pageNumber;		$params["pageSize"] = $pageSize;		$params["orderBy"] = $orderBy;		$params["sortOrder"] = $sortOrder;		return $this->invokeMethod("autoresponderGetList", $params);	}	/**    * Update an existing email with the given details.    *    * @section Email Campaign Related Methods    *    * @example bmeapi_emailUpdate.php    *    * @param Array $emailDetails The array containing the email details.    * Array Structure    *  string id - The email campaign ID to update. You can get the emails from emailGet    *  string fromName - Name displayed as "from" in your contact's in-box    *  string fromEmail -  Email displayed as "from address" in your contact's in-box    *  string emailName -  For your personal use; not displayed in your email    *  string replyEmail - Replies are forwarded to this address    *  string subject -  Subject line of your email    *  string templateContent -  The content of email    *  integer toListID  - The contact list ID to whom this campaign is to be sent to. You can get the contact lists from listGet    *  string us_address - optional. The Address line in case of a US based sender. Defaults to address information provided in the Client Settings    *  string us_state   - optional. The State in case of a US based sender. Defaults to address information provided in the Client Settings    *  string us_city    - optional. The City in case of a US based sender. Defaults to address information provided in the Client Settings    *  string us_zip     - optional. The Zip Code in case of a US based sender. Defaults to address information provided in the Client Settings    *  string intl_address - optional. The Zip Code in case of a non-US based sender. Defaults to address information provided in the Client Settings    *  bool webpageVersion - optional. Include a link to view a web version of the email. Defaults to false.    *  string permissionReminderMessage -  optional. A Permission reminder which appears on top of the email. Defaults to blank.    *  string googleAnalyticsCampaign -  optional. The Google Analytics campaign name. If provided, all links in the email will be enabled for tracking by Google Analytics. Defaults to blank.    *  string scheduleDate - optional. The date on which the campaign is to be delivered. Defaults to 'Draft'.    * @return bool Returns true on success    */	function emailUpdate($emailDetails)	{		$params = array();		$params["emailDetails"] = $emailDetails;		return $this->invokeMethod("emailUpdate", $params);	}	/**    * Update an existing email with the given details.    *    * @section Email Campaign Related Methods    *    * @example bmeapi_emailRssUpdate.php    *    * @param Array $emailDetails The array containing the email details.    * Array Structure    *  string id - The email campaign ID to update. You can get the emails from emailGet    *  string fromName - Name displayed as "from" in your contact's in-box    *  string fromEmail -  Email displayed as "from address" in your contact's in-box    *  string emailName -  For your personal use; not displayed in your email    *  string replyEmail - Replies are forwarded to this address    *  string subject -  Subject line of your email    *  string templateContent -  The content of email	*  string rssurl - The url for rss feed    *  integer toListID  - The contact list ID to whom this campaign is to be sent to. You can get the contact lists from listGet    *  string us_address - optional. The Address line in case of a US based sender. Defaults to address information provided in the Client Settings    *  string us_state - optional. The State in case of a US based sender. Defaults to address information provided in the Client Settings    *  string us_city -  optional. The City in case of a US based sender. Defaults to address information provided in the Client Settings    *  string us_zip - optional. The Zip Code in case of a US based sender. Defaults to address information provided in the Client Settings    *  string intl_address - optional. The Zip Code in case of a non-US based sender. Defaults to address information provided in the Client Settings    *  bool webpageVersion - optional. Include a link to view a web version of the email. Defaults to false.    *  string permissionReminderMessage -  optional. A Permission reminder which appears on top of the email. Defaults to blank.    *  string googleAnalyticsCampaign -  optional. The Google Analytics campaign name. If provided, all links in the email will be enabled for tracking by Google Analytics. Defaults to blank.    *  string scheduleDate - optional. The date on which the campaign is to be delivered. Defaults to 'Draft'.    *  string rssinterval   - optional. Interval for rss campaign, default value is 0 , accepted values are 1 , 7 , 30.    * @return bool Returns true on success    */	function emailRssUpdate($emailDetails)	{		$params = array();		$params["emailDetails"] = $emailDetails;		return $this->invokeMethod("emailRssUpdate", $params);	}	/**    * Assign Lists to the Email for given ID.    *    * @section Email Campaign Related Methods    *    * @example bmeapi_emailAssignList.php    *    * @param string $emailID The email ID to update. To get all the emails, use the emailGet method.    * @param array $contacts The array containing the listID / segmentID(s) to assign to the email.    */	function emailAssignList($emailID, $contacts)	{		$params = array();		$params["emailID"] = $emailID;		$params["contacts"] = $contacts;		return $this->invokeMethod("emailAssignList", $params);	}	/***/	function emailTemplateGetCount()	{		$params = array();		return $this->invokeMethod("emailTemplateGetCount", $params);	}	/***/	function emailTemplateGetList($pn, $ps)	{		$params = array();		$params['pageNumber'] = $pn;		$params['pageSize'] = $ps;		return $this->invokeMethod("emailTemplateGetList", $params);	}	/**	*/	function emailCheckName($emailID, $NewName)	{		$params = array();		$params['emailID'] = $emailID;		$params['emailName'] = $NewName;		return $this->invokeMethod("emailCheckName", $params);	}	/**		*/	function emailPreview($emailID, $emailAddress, $HtmlContent, $TextContent)	{		$params = array();		$params['emailID'] = $emailID;		$params['emailAddress'] = $emailAddress;		$params['htmlcontent'] = $HtmlContent;		$params['textcontent'] = $TextContent;		return $this->invokeMethod("emailPreview", $params);	}	/**			*/	function emailPreviewTest($emailID, $emailAddress, $HtmlContent, $TextContent, $PersonalMessage)	{		$params = array();		$params['emailID'] = $emailID;		$params['emailAddress'] = $emailAddress;		$params['htmlcontent'] = $HtmlContent;		$params['textcontent'] = $TextContent;		$params['message'] = $PersonalMessage;		return $this->invokeMethod("emailPreviewTest", $params);	}	/**	    * Reassign Lists to the Email for given ID.	    *	    * @section Email Campaign Related Methods	    *	    * @example bmeapi_emailReassignList.php	    *	    * @param string $emailID The email ID to update. To get all the emails, use the emailGet method.	    * @param array $contacts The array containing the listID / segmentID(s) to assign to the email.	    */	function emailReassignList($emailID, $contacts)	{		$params = array();		$params["emailID"] = $emailID;		$params["contacts"] = $contacts;		return $this->invokeMethod("emailReassignList", $params);	}	/**    * Add the contact details to the given contact list. Multiple contacts would be added if the details has more than one items.    *    * @section Contact List Related Methods    *    * @example bmeapi_listAddContacts.php    *    * @param string listid - The contact list ID in which to add contacts. To get all the contact lists, use the listGet method.    * @param Array Structure contacts    *    *  string email - The email address    *  string firstname -  The first name of the contact    *  string lastname -  The last name of the contact    * @return integer Returns the total number of contacts which were successfully added.    */	function listAddContacts($listID, $contacts)	{		$params = array();		$params["listID"] = $listID;		$params["contacts"] = $contacts;		//$params["optin"] = $optin;		return $this->invokeMethod("listAddContacts", $params);	}	/**	    * Search the contact in the contact lists.	    *	    * @section Contact List Related Methods	    *	    * @example bmeapi_listSearchContacts.php	    *	    * @param string $emailID - The email ID which you want to search.	    * @return Array of contact list	    */	function listSearchContacts($emailID)	{		$params = array();		$params["emailID"] = $emailID;		return $this->invokeMethod("listSearchContacts", $params);	}	/**    * Add the contact details to the given contact list. Multiple contacts would be added if the details has more than one items.    *    * @section Contact List Related Methods    *    * @example bmeapi_listAddContactsOptin.php    *    * @param string listid - The contact list ID in which to add contacts. To get all the contact lists, use the listGet method.    * @param Array Structure contacts    *    *  string email - The email address    *  string firstname -  The first name of the contact    *  string lastname -  The last name of the contact    * @return integer Returns the total number of contacts which were successfully added.    */	function listAddContactsOptin($listID, $contacts, $optin = 0)	{		$params = array();		$params["listID"] = $listID;		$params["contacts"] = $contacts;		$params["optin"] = $optin;		return $this->invokeMethod("listAddContacts", $params);	}	/**    * Add the contact details using the signup form    *    * @section Contact List Related Methods    *    * @example bmeapi_listAddContactsForm.php    *    * @param string signupformid - The signup form ID used to add contacts. To get all the contact lists, use the listGetSignupForms method.    * @param Structure contacts    *  string email - The email address    *  string firstname -  The first name of the contact    *  string lastname -  The last name of the contact    * @return integer Returns if the contact was successfully added.    */	function listAddContactsForm($signupformid, $contacts)	{		$params = array();		$params["signupformid"] = $signupformid;		$params["contacts"] = $contacts;		return $this->invokeMethod("listAddContactsForm", $params);	}	/**    * Create a new contact list.    *    * @section Contact List Related Methods    *    * @example bmeapi_listCreate.php    *    * @param string listName - The name of the contact list you want to create.    * @return string Returns the contact list ID of the newly created list.    */	function listCreate($listName)	{		$params = array();		$params["listName"] = $listName;		return $this->invokeMethod("listCreate", $params);	}	/**    * Get the contact lists in your account.    *    * @section Contact List Related Methods    *    * @example bmeapi_listGet.php    *    * @param string $filter Show lists where the contact list name starts with the filter    * @param integer $pageNumber  Fetch results from the given page number.    * @param integer $pageSize  Number of results per page.    * @param string $orderBy  Sort the results based on "name" or "date".    * @param string $sortOrder  Sort the results in the "asc"ending or "desc"ending order.    * @return array Returns an array with the results.    * Return Array Structure    * integer sequence - The sequence number of the record    * string id - The ID of the contact list. To get the contacts from this list , use the listGetContacts method.    * string listname - Name of the contact list    * string contactcount - The number of active contacts in the list    * string createdDate - The date on which the list was created    * string modifiedDate - The date on which the list was last updated    */	function listGet($filter, $pageNumber, $pageSize, $orderBy, $sortOrder)	{		$params = array();		$params["filter"] = $filter;		$params["pageNumber"] = $pageNumber;		$params["pageSize"] = $pageSize;		$params["orderBy"] = $orderBy;		$params["sortOrder"] = $sortOrder;		return $this->invokeMethod("listGet", $params);	}	/**    * Get the contact details from the contact list    *    * @section Contact List Related Methods    *    * @example bmeapi_listGetContactDetails.php    *    * @param string listID - The contact list ID from which you want to retrieve records. To get the contact lists in your account, use the listGet method.    * @param string emailAddress - The email address for which details are required    * @return array Returns an array with the results.    * Return Array Structure    * integer sequence - The sequence number of the record    * string id - The ID of the contact    * string email - Email Address of the contact    * string Other Fields - All other fields based on the contact list fields are displayed. The name of the fields will correspond to the field names used when creating the contact list    */	function listGetContactDetails($listID, $emailAddress)	{		$params = array();		$params["listID"] = $listID;		$params["emailAddress"] = $emailAddress;		return $this->invokeMethod("listGetContactDetails", $params);	}	/**    * Get the contacts from the contact list.    *    * @section Contact List Related Methods    *    * @example bmeapi_listGetContacts.php    *    * @param string $listID The contact list ID from which you want to retrieve records. To get the contact lists in your account, use the listGet method.    * @param string $filter Show contacts where the email address contains with the filter    * @param integer $pageNumber  Fetch results from the given page number.    * @param integer $pageSize  Number of results per page.    * @param string $orderBy  Sort the results based on "email" or "date".    * @param string $sortOrder  Sort the results in the "asc"ending or "desc"ending order.    * @return array Returns an array with the results.    * Return Array Structure    * integer sequence - The sequence number of the record    * string id - The ID of the contact    * string email - Email Address of the contact. To get all the details for the contact, use the listGetContactDetails method.    * string firstname - First name of the contact    * string middlename - Middle name of the contact    * string lastname - Last name of the contact    */	function listGetContacts($listID, $filter, $pageNumber, $pageSize, $orderBy, $sortOrder)	{		$params = array();		$params["listID"] = $listID;		$params["filter"] = $filter;		$params["pageNumber"] = $pageNumber;		$params["pageSize"] = $pageSize;		$params["orderBy"] = $orderBy;		$params["sortOrder"] = $sortOrder;		return $this->invokeMethod("listGetContacts", $params);	}	/**	    * Get the contacts from the contact list According to type.	    *	    * @section Contact List Related Methods	    *	    * @example bmeapi_listGetContactsByType.php	    *	    * @param string $listID The contact list ID from which you want to retrieve records. To get the contact lists in your account, use the listGet method.	    * @param string $filter Show contacts where the email address contains with the filter	    * @param integer $pageNumber  Fetch results from the given page number.	    * @param integer $pageSize  Number of results per page.	    * @param string $orderBy  Sort the results based on "email" or "date".	    * @param string $sortOrder  Sort the results in the "asc"ending or "desc"ending order.	    * @param string $type - The type of which contacts required	    * @return array Returns an array with the results.	    * Return Array Structure	    * integer sequence - The sequence number of the record	    * string id - The ID of the contact	    * string email - Email Address of the contact. To get all the details for the contact, use the listGetContactDetails method.	    * string firstname - First name of the contact	    * string middlename - Middle name of the contact	    * string lastname - Last name of the contact	    */	function listGetContactsByType($listID, $filter, $pageNumber, $pageSize, $orderBy, $sortOrder, $type)	{		$params = array();		$params["listID"] = $listID;		$params["filter"] = $filter;		$params["pageNumber"] = $pageNumber;		$params["pageSize"] = $pageSize;		$params["orderBy"] = $orderBy;		$params["sortOrder"] = $sortOrder;		$params["type"] = $type;		return $this->invokeMethod("listGetContactsByType", $params);	}	/**    * Unsubscribe the contacts from the given contact list.    *    * @section Contact List Related Methods    *    * @example bmeapi_listUnsubscribeContacts.php    *    * @param string $listID The contact list ID in which to unsubscrib contacts. To get all the contact lists, use the listGet method.    * @param array contacts   The string array containing the contact details.    * @return integer Returns the total number of contacts which are active in the list.    */	function listUnsubscribeContacts($listID, $contacts)	{		$params = array();		$params["listID"] = $listID;		$params["contacts"] = $contacts;		return $this->invokeMethod("listUnsubscribeContacts", $params);	}	/**    * Unsubscribe the contacts from the given contact list.    *    * @section Contact List Related Methods    *    * @example bmeapi_listSubscribeContacts.php    *    * @param string $listID The contact list ID in which to unsubscrib contacts. To get all the contact lists, use the listGet method.    * @param array contacts   The string array containing the contact details.    * @return integer Returns the total number of contacts which are active in the list.    */	function listDeleteContacts($listID, $contacts)	{		$params = array();		$params["listid"] = $listID;		$params["contacts"] = $contacts;		return $this->invokeMethod("listDeleteContacts", $params);	}	/**	* Delete the contacts from the given contact list.	*	* @section Contact List Related Methods	*	* @example bmeapi_listdeleteemailcontact.php	*	* @param string $listID The contact list ID in which to delete contact. To get all the contact lists, use the listGet method.	* @param array contact   The string containing the contact email.	* @return integer Returns the total number of contacts which are deleted from the list.	*/	function listdeleteemailcontact($listID, $contacts)	{		$params = array();		$params["listid"] = $listID;		$params["email"] = $contacts;		return $this->invokeMethod("listdeleteemailcontact", $params);	}	/**    * Unsubscribe the contacts from the given contact list.    *    * @section Contact List Related Methods    *    * @example bmeapi_listUpdateContactDetails.php    *    * @param string $listID The contact list ID from which you want to retrieve records. To get the contact lists in your account, use the listGet method.    * @param string $contactID The contact ID which you want to update. To get the contact ID from a list in your account, use the listGetContacts method.    * @param array contactDetail   The string array containing the contact details.    * Return Array Structure    * integer sequence - The sequence number of the record    * string id - The ID of the contact    * string email - Email Address of the contact. To get all the details for the contact, use the listGetContactDetails method.    * string firstname - First name of the contact    * string middlename - Middle name of the contact    * string lastname - Last name of the contact    */	function listUpdateContactDetails($listID, $contactID, $contactDetail)	{		$params = array();		$params["listID"] = $listID;		$params["contactID"] = $contactID;		$params["contactDetail"] = $contactDetail;		return $this->invokeMethod("listUpdateContactDetails", $params);	}	/**    * Get the signup forms in your account.    *    * @section Contact List Related Methods    *    * @example listGetSignupForms.php    *    * @param integer $pageNumber  Fetch results from the given page number.    * @param integer $pageSize  Number of results per page.    * @param string $orderBy  Sort the results based on "name" or "date".    * @param string $sortOrder  sort order sort either ascending or descending.    * @return array Returns an array with the results.    * Return Array Structure    * integer sequence - The sequence number of the record    * string id - The ID of the signup form.    * string name - Name of the signup form    * string listname - Name of the contact list    */	function listGetSignupForms($pageNumber, $pageSize, $orderBy, $sortOrder)	{		$params = array();		$params["pageNumber"] = $pageNumber;		$params["pageSize"] = $pageSize;		$params["orderBy"] = $orderBy;		$params["sortOrder"] = $sortOrder;		return $this->invokeMethod("listGetSignupForms", $params);	}	/**    * Get the segments in your account.    *    * @section Segment Related Methods    *    * @example bmeapi_segmentGet.php    *    * @param string $filter Show lists where the segment name starts with the filter    * @param integer $pageNumber  Fetch results from the given page number.    * @param integer $pageSize  Number of results per page.    * @param string $orderBy  Sort the results based on "name" or "date".    * @return array Returns an array with the results.    * Return Array Structure    * integer sequence - The sequence number of the record    * string id - The ID of the contact list. To get the contacts from this list , use the listGetContacts method.    * string segmentname - Name of the segment    * string listid - ID of the list    * string listname - Name of the contact list    * string contactcount - The number of active contacts in the list    * string createdDate - The date on which the list was created    * string modifiedDate - The date on which the list was last updated    */	function segmentGet($filter, $pageNumber, $pageSize, $orderBy)	{		$params = array();		$params["filter"] = $filter;		$params["pageNumber"] = $pageNumber;		$params["pageSize"] = $pageSize;		$params["orderBy"] = $orderBy;		return $this->invokeMethod("segmentGet", $params);	}	/**    * Get the segments in your account.    *    * @section Segment Related Methods    *    * @example bmeapi_segmentGetDetail.php    *    * @param string $segmentID The ID of segment you want to delete    * @return array Returns an array with the results.    * Return Array Structure    * integer sequence - The sequence number of the record    * string id - The ID of the contact list. To get the contacts from this list , use the listGetContacts method.    * string segmentname - Name of the segment    * string listid - ID of the list    * string listname - Name of the contact list    * string contactcount - The number of active contacts in the list    * string createdDate - The date on which the list was created    * string modifiedDate - The date on which the list was last updated    */	function segmentGetDetail($segmentID)	{		$params = array();		$params["segmentID"] = $segmentID;		return $this->invokeMethod("segmentGetDetail", $params);	}	/**    * Create  the segments in your account.    *    * @section Segment Related Methods    *    * @example bmeapi_segmentCreate.php    *    * @param string $segmentname The name of segment    * @param string $description The description of the segment    * @param integer $listID The list ID on which the segment is created    * @return array Returns segment ID    * Return Segment ID    */	function segmentCreate($segmentData)	{		$params = array();		$params["segmentDetail"] = $segmentData;		return $this->invokeMethod("segmentCreate", $params);	}	/**    * Delete a segment in your account.    *    * @section Segment Related Methods    *    * @example bmeapi_segmentDelete.php    *    * @param string $segmentid The ID of segment you want to delete    * @return bool Returns true in case the segment is deleted    */	function segmentDelete($segmentID)	{		$params = array();		$params["segmentid"] = $segmentID;		return $this->invokeMethod("segmentDelete", $params);	}	/**    * Delete a segment criteria in your account.    *    * @section Segment Related Methods    *    * @example bmeapi_segmentDeleteCriteria.php    *    * @param string $segmentid The ID of segment you want to delete the criteria from    * @param string $criteriaID The ID of criteria you want to delete    * @return bool Returns true in case the criteria is deleted    */	function segmentDeleteCriteria($segmentID, $criteriaID)	{		$params = array();		$params["segmentid"] = $segmentID;		$params["criteriaid"] = $criteriaID;		return $this->invokeMethod("segmentDeleteCriteria", $params);	}	/**    * Get the contacts from the segment.    *    * @section Segment List Related Methods    *    * @example bmeapi_segmentGetContacts.php    *    * @param string $segmentID The segment ID from which you want to retrieve records. To get the segments in your account, use the segmentGet method.    * @param string $filter Show contacts where the email address contains with the filter    * @param integer $pageNumber  Fetch results from the given page number.    * @param integer $pageSize  Number of results per page.    * @param string $orderBy  Sort the results based on "email" or "date".    * @param string $sortOrder  Sort the results in the "asc"ending or "desc"ending order.    * @return array Returns an array with the results.    * Return Array Structure    * integer sequence - The sequence number of the record    * string id - The ID of the contact    * string email - Email Address of the contact. To get all the details for the contact, use the listGetContactDetails method.    * string firstname - First name of the contact    * string middlename - Middle name of the contact    * string lastname - Last name of the contact    */	function segmentGetContacts($segmentID, $filter, $pageNumber, $pageSize, $orderBy, $sortOrder)	{		$params = array();		$params["listID"] = $segmentID;		$params["filter"] = $filter;		$params["pageNumber"] = $pageNumber;		$params["pageSize"] = $pageSize;		$params["orderBy"] = $orderBy;		$params["sortOrder"] = $sortOrder;		return $this->invokeMethod("segmentGetContacts", $params);	}	/**    * Get the contacts from the segment.    *    * @section Segment List Related Methods    *    * @example bmeapi_segmentGetCriteriaList.php    *    * @param string $segmentID The segment ID from which you want to retrieve records. To get the segments in your account, use the segmentGet method.    * @return array Returns an array with the results.    * Return Array Structure    * integer sequence - The sequence number of the record    * string id - The ID of the contact    * string field - Email Address of the contact. To get all the details for the contact, use the listGetContactDetails method.    * string segmentid - First name of the contact    * string startdate - Middle name of the contact    * string enddate - Last name of the contact    * string filtertype - Last name of the contact    * string filter - Last name of the contact    */	function segmentGetCriteriaList($segmentID)	{		$params = array();		$params["segmentID"] = $segmentID;		return $this->invokeMethod("segmentGetCriteriaList", $params);	}	/**    * Create a criteria for the segment.    *    * @section Segment List Related Methods    *    * @example bmeapi_segmentCreateCriteria.php    *    * @param string $segmentID - The segment ID for which you want to create the criteria. To get the segments in your account, use the segmentGet method.    * @param string $field - The field for which you want to create the criteria.    * @param string $filtertype - The type of filter (starts, ends, contains, equal, not starts, not ends, not contains, not equal, between)    * @param string $filter - The string to match for the field filter    * @param string $startDate - The start date (where field is "Subscribed Date")    * @param string $endDate - The start date (where field is "Subscribed Date" and filtertype = "between")    * @return string Returns the criteria ID    */	function segmentCreateCriteria($segmentID, $fldArr)	{		$params = array();		$params["segmentID"] = $segmentID;		$params["segmentCriteria"] = $fldArr;		return $this->invokeMethod("segmentCreateCriteria", $params);	}	/**    * Get the list of sent campaign using the filter and paging limits, ordered by the name or date of the campaign.    *    * @section Report Related Methods    *    * @example bmeapi_reportGet.php    *    * @param string $filter Show campaigns where the campaign name starts with the filter    * @param integer $pageNumber  Fetch results from the given page number.    * @param integer $pageSize  Number of results per page.    * @param string $orderBy  Sort the results based on "name" or "date".    * @param string $sortOrder  Sort the results in the "asc"ending or "desc"ending order.    * @return array Returns an array with the results.    * Return Array Structure    * integer sequence - The sequence number of the record    * string id - The ID of the email campaign    * string emailName - Name of the email campaign    * bool isSegment - True if the target for the campaign is a segment    * integer toListID - The ID of the target contact list ID / segment    * string toListName - The name of the target contact list ID / segment    * string status - The status of the email campaign. Can be Sent, Draft, Scheduled or Incomplete    * string createdDate - The date on which the email campaign was created    * string scheduleDate - The campaign delivery date    */	function reportGet($filter, $pageNumber, $pageSize, $orderBy, $sortOrder)	{		$params = array();		$params["filter"] = $filter;		$params["pageNumber"] = $pageNumber;		$params["pageSize"] = $pageSize;		$params["orderBy"] = $orderBy;		$params["sortOrder"] = $sortOrder;		return $this->invokeMethod("reportGet", $params);	}	/**    * Get the email addresses which bounced in a given campaign,using the paging limits, ordered by the email or date of the bounced record.    *    * @section Report Related Methods    *    * @example bmeapi_reportGetBounces.php    *    * @param string $emailID The email campaign ID for which the bounces are to be fetched. To get the email campaign ID, use the reportGet method.    * @param integer $pageNumber  Fetch results from the given page number.    * @param integer $pageSize  Number of results per page.    * @param string $Filter  Fiter the result on the basis of given value if 1 then soft else if 2 then hard else if blank then both type of reports(soft/hard) .    * @param string $orderBy  Sort the results based on "name" or "date".    * @return array Returns an array with the results.    * Return Array Structure    * integer sequence - The sequence number of the record    * string email - The bounced email address    * string name - Name of the contact    * string name - Type of bounce. Can be either Soft or Hard bounce.    */	function reportGetBounces($emailID, $pageNumber, $pageSize, $filter, $orderBy, $sortOrder)	{		$params = array();		$params["emailID"] = $emailID;		$params["pageNumber"] = $pageNumber;		$params["pageSize"] = $pageSize;		$params["$filter"] = $filter;		$params["orderBy"] = $orderBy;		$params["sortOrder"] = $sortOrder;		return $this->invokeMethod("reportGetBounces", $params);	}	/**    * Get the click URL stats for the given campaign.    *    * @section Report Related Methods    *    * @example bmeapi_reportGetClicks.php    *    * @param string $emailID The email campaign ID for which the click statistics are to be fetched. To get the email campaign ID, use the reportGet method.    * @return array Returns an array with the results.    * Return Array Structure    * integer sequence - The sequence number of the record    * string URL - The URL which was clicked    * string clicks - The total number of clicks received by the URL    * string percent - The percentage of the clicks received by the URL.    */	function reportGetClicks($emailID)	{		$params = array();		$params["emailID"] = $emailID;		return $this->invokeMethod("reportGetClicks", $params);	}	/**    * Get the email addresses which had clicks in a given campaign,using the paging limits.    *    * @section Report Related Methods    *    * @example bmeapi_reportGetClickEmails.php    *    * @param string $emailID  The email campaign ID for which the clicked emails are to be fetched. To get the email campaign ID, use the reportGet method.    * @param string $clickUrl Url on which user clicked    * @param integer $pageNumber  Fetch results from the given page number.    * @param integer $pageSize  Number of results per page.    * @param string $orderBy  Sort the results based on "name" or "date".    * @param string $sortOrder  Sort the results in the "asc"ending or "desc"ending order.    * @return array Returns an array with the results.    * Return Array Structure    * integer sequence - The sequence number of the record    * string email - The opened email address    * string name - Name of the contact    * string logdate - Date on which the open was logged.    */	function reportGetClickEmails($emailID, $clickUrl, $pageNumber, $pageSize, $orderBy, $sortOrder)	{		$params = array();		$params["emailID"] = $emailID;		$params["filter"] = $clickUrl;		$params["pageNumber"] = $pageNumber;		$params["pageSize"] = $pageSize;		$params["orderBy"] = $orderBy;		$params["sortOrder"] = $sortOrder;		return $this->invokeMethod("reportGetClickEmails", $params);	}	/**    * Get the email addresses to which the given campaign was forwarded,using the paging limits, ordered by the email or date of the forwarded record.    *    * @section Report Related Methods    *    * @example bmeapi_reportGetForwards.php    *    * @param string $emailID  The email campaign ID for which the forwards are to be fetched. To get the email campaign ID, use the reportGet method.    * @param integer $pageNumber  Fetch results from the given page number.    * @param integer $pageSize  Number of results per page.    * @param string $orderBy  Sort the results based on "name" or "date".    * @param string $sortOrder  Sort the results in the "asc"ending or "desc"ending order.    * @return array Returns an array with the results.    * Return Array Structure    * integer sequence - The sequence number of the record    * string email - The forwarded email address    * string name - Name of the contact    * string logdate - The date on which it was forwarded    */	function reportGetForwards($emailID, $pageNumber, $pageSize, $orderBy, $sortOrder)	{		$params = array();		$params["emailID"] = $emailID;		$params["pageNumber"] = $pageNumber;		$params["pageSize"] = $pageSize;		$params["orderBy"] = $orderBy;		$params["sortOrder"] = $sortOrder;		return $this->invokeMethod("reportGetForwards", $params);	}	/**    * Get the email addresses which hard bounced in a given campaign,using the paging limits, ordered by the email or date of the bounced record.    *    * @section Report Related Methods    *    * @example bmeapi_reportGetHardBounces.php    *    * @param string $emailID  The email campaign ID for which the hard bounces are to be fetched. To get the email campaign ID, use the reportGet method.    * @param integer $pageNumber  Fetch results from the given page number.    * @param integer $pageSize  Number of results per page.    * @param string $orderBy  Sort the results based on "name" or "date".    * @param string $sortOrder  Sort the results in the "asc"ending or "desc"ending order.    * @return array Returns an array with the results.    * Return Array Structure    * integer sequence - The sequence number of the record    * string email - The forwarded email address    * string name - Name of the contact    * string type - Type of bounce. Hard Bounce.    */	function reportGetHardBounces($emailID, $pageNumber, $pageSize, $orderBy, $sortOrder)	{		$params = array();		$params["emailID"] = $emailID;		$params["pageNumber"] = $pageNumber;		$params["pageSize"] = $pageSize;		$params["orderBy"] = $orderBy;		$params["sortOrder"] = $sortOrder;		return $this->invokeMethod("reportGetHardBounces", $params);	}	/**    * Get the email addresses which soft bounced in a given campaign,using the paging limits, ordered by the email or date of the bounced record.    *    * @section Report Related Methods    *    * @example bmeapi_reportGetSoftBounces.php    *    * @param string $emailID  The email campaign ID for which the soft bounces are to be fetched. To get the email campaign ID, use the reportGet method.    * @param integer $pageNumber  Fetch results from the given page number.    * @param integer $pageSize  Number of results per page.    * @param string $orderBy  Sort the results based on "name" or "date".    * @param string $sortOrder  Sort the results in the "asc"ending or "desc"ending order.    * @return array Returns an array with the results.    * Return Array Structure    * integer sequence - The sequence number of the record    * string email - The forwarded email address    * string name - Name of the contact    * string type - Type of bounce. Hard Bounce.    */	function reportGetSoftBounces($emailID, $pageNumber, $pageSize, $orderBy, $sortOrder)	{		$params = array();		$params["emailID"] = $emailID;		$params["pageNumber"] = $pageNumber;		$params["pageSize"] = $pageSize;		$params["orderBy"] = $orderBy;		$params["sortOrder"] = $sortOrder;		return $this->invokeMethod("reportGetSoftBounces", $params);	}	/**    * Get the email addresses which were opened in a given campaign,using the paging limits, ordered by the email or date of the opened record.    *    * @section Report Related Methods    *    * @example bmeapi_reportGetOpens.php    *    * @param string $emailID  The email campaign ID for which the opens are to be fetched. To get the email campaign ID, use the reportGet method.    * @param integer $pageNumber  Fetch results from the given page number.    * @param integer $pageSize  Number of results per page.    * @param string $orderBy  Sort the results based on "name" or "date".    * @param string $sortOrder  Sort the results in the "asc"ending or "desc"ending order.    * @return array Returns an array with the results.    * Return Array Structure    * integer sequence - The sequence number of the record    * string email - The opened email address    * string name - Name of the contact    * string logdate - Date on which the open was logged.    */	function reportGetOpens($emailID, $pageNumber, $pageSize, $orderBy, $sortOrder)	{		$params = array();		$params["emailID"] = $emailID;		$params["pageNumber"] = $pageNumber;		$params["pageSize"] = $pageSize;		$params["orderBy"] = $orderBy;		$params["sortOrder"] = $sortOrder;		return $this->invokeMethod("reportGetOpens", $params);	}	/**    * Get the email addresses which were neither opened nor bounced in a given campaign,using the paging limits, ordered by the email or date of the opened record.    *    * @section Report Related Methods    *    * @example bmeapi_reportGetUnopens.php    *    * @param string $emailID  The email campaign ID for which the unopens are to be fetched. To get the email campaign ID, use the reportGet method.    * @param integer $pageNumber  Fetch results from the given page number.    * @param integer $pageSize  Number of results per page.    * @param string $orderBy  Sort the results based on "name" or "date".    * @param string $sortOrder  Sort the results in the "asc"ending or "desc"ending order.    * @return array Returns an array with the results.    * Return Array Structure    * integer sequence - The sequence number of the record    * string email - The unopened email address    */	function reportGetUnopens($emailID, $pageNumber, $pageSize, $orderBy, $sortOrder)	{		$params = array();		$params["emailID"] = $emailID;		$params["pageNumber"] = $pageNumber;		$params["pageSize"] = $pageSize;		$params["orderBy"] = $orderBy;		$params["sortOrder"] = $sortOrder;		return $this->invokeMethod("reportGetUnopens", $params);	}	/**    * Get the email addresses which unsubscribed in a given campaign,using the paging limits, ordered by the email or date of the unsubscribe record.    *    * @section Report Related Methods    *    * @example bmeapi_reportGetUnsubscribes.php    *    * @param string $emailID  The email campaign ID for which the unsubscribes are to be fetched. To get the email campaign ID, use the reportGet method.    * @param integer $pageNumber  Fetch results from the given page number.    * @param integer $pageSize  Number of results per page.    * @param string $orderBy  Sort the results based on "name" or "date".    * @param string $sortOrder  Sort the results in the "asc"ending or "desc"ending order.    * @return array Returns an array with the results.    * Return Array Structure    * integer sequence - The sequence number of the record    * string email - The unsubscribed email address    * string name - Name of the contact    * string logdate - Date on which the unsubscribe was logged.    */	function reportGetUnsubscribes($emailID, $pageNumber, $pageSize, $orderBy, $sortOrder)	{		$params = array();		$params["emailid"] = $emailID;		$params["pageNumber"] = $pageNumber;		$params["pageSize"] = $pageSize;		$params["orderBy"] = $orderBy;		$params["sortOrder"] = $sortOrder;		return $this->invokeMethod("reportGetUnsubscribes", $params);	}	/**	    * Retrives Open Count for each country	    *	    * @section Report Related Methods	    *	    * @example bmeapi_reportGetOpenCountry.php	    *	    * @param string $emailID  Email Id for which you want the open report	    * @return array Returns an array with the results.	    * Return Array Structure	    * string sequence - The sequence number of the record	    * string country_name - Name of the Country	    * string country_region - Country Code for the country	    * string openCount - Number of open for the Country region	    */	function reportGetOpenCountry($emailID)	{		$params = array();		$params["emailID"] = $emailID;		return $this->invokeMethod("reportGetOpenCountry", $params);	}	/**		    * Retrives Open Count for each region of the country.		    *		    * @section Report Related Methods		    *		    * @example bmeapi_reportGetOpenForCountry.php		    *		    * @param string $emailID ID of the email for which you want the Open report		    * @param string $countryCode  Country code of which regions open count you required		    * @return array Returns an array with the results.		    * Return Array Structure			* string sequence - The sequence number of the record			* string country_name - Name of the Country			* string country_region - Country Code for the country	        * string openCount - Number of open for the Country region		    */	function reportGetOpenForCountry($emailID, $countryCode)	{		$params = array();		$params["emailID"] = $emailID;		$params["countryCode"] = $countryCode;		return $this->invokeMethod("reportGetOpenForCountry", $params);	}	/**    * Get the email statistics for a campaign    *    * @section Report Related Methods    *    * @example bmeapi_reportGetSummary.php    *    * @param string $emailID  The email campaign ID for which the summary statistics are to be fetched. To get the email campaign ID, use the reportGet method.    * @return array Returns an array with the results.    * Return Array Structure    * integer sequence - The sequence number of the record    * string email - The unsubscribed email address    * string name - Name of the contact    * string logdate - Date on which the unsubscribe was logged.    */	function reportGetSummary($emailID)	{		$params = array();		$params["emailID"] = $emailID;		return $this->invokeMethod("reportGetSummary", $params);	}	/**	    * Get the email statistics for a campaign	    *	    * @section Report Related Methods	    *	    * @example bmeapi_reportCompare.php	    *	    * @param string $emailID  The email campaign IDs for which the summary statistics are to be fetched. To get the email campaign ID, use the reportGet method.	    * @return array Returns an array with the results.	    * Return Array Structure	    * integer sequence - The sequence number of the record	    * string email - The unsubscribed email address	    * string name - Name of the contact	    * string logdate - Date on which the unsubscribe was logged.	    */	function reportCompare($emailIDs)	{		$params = array();		$params["emailIDs"] = $emailIDs;		return $this->invokeMethod("reportCompare", $params);	}	/**    * Get the list of emails the client has sent for confirmation    *    * @section Client Related Methods    *    * @example bmeapi_GetConfirmEmailList.php    *    * @return array Returns an array with the results.    * Return Array Structure    * integer sequence     - The sequence number of the record    * integer id           - Unique identifier of the record    * string email         - The unsubscribed email address    * integer confirmed    - Whether the client has been verified or not    * string createddate   - Date on which the record was created	* string modifieddate  - Date on which the record was modified    */	function confirmEmailList()	{		$params = array();		return $this->invokeMethod("confirmEmailList", $params);	}	/**    * Add a token for the user.    *    * @section Client Related Methods    *    * @example bmeapi_AddConfirmEmail.php    *    * @param string $targetEmailID  List of email addresses to be verified    * @return string  Returns "" if the emails are added else it returns the list of emails that were not added.    */	function confirmEmailAdd($targetEmailID)	{		$params = array();		$params["targetEmailID"] = $targetEmailID;		return $this->invokeMethod("confirmEmailAdd", $params);	}	/**    * Add a token for the user.    *    * @section Security Related Methods    *    * @example bmeapi_tokenAdd.php    *    * @param string $userName  Your Benchmark Email user name    * @param string $password  Your Benchmark Email password    * @param string $token  Enter your own token. Should be atleast 6 characters long. To delete an existing token use the tokenDelete method.    * @return bool  Returns true if the token was set.    */	function tokenAdd($userName, $password, $token)	{		$params = array();		$params["userName"] = $userName;		$params["password"] = $password;		$params["token"] = $token;		return $this->invokeMethod("tokenAdd", $params);	}	/**    * Delete an existing token for the user.    *    * @section Security Related Methods    *    * @example bmeapi_tokenDelete.php    *    * @param string $userName  Your Benchmark Email user name    * @param string $password  Your Benchmark Email password    * @param string $token  Your existing token. You can get a list of your valid tokens using tokenGet.    * @return bool  Returns true if the token was deleted.    */	function tokenDelete($userName, $password, $token)	{		$params = array();		$params["userName"] = $userName;		$params["password"] = $password;		$params["token"] = $token;		return $this->invokeMethod("tokenDelete", $params);	}	/**    * Fetch all tokens for the user.    *    * @section Security Related Methods    *    * @example bmeapi_tokenGet.php    *    * @param string $userName  Your Benchmark Email user name    * @param string $password  Your Benchmark Email password    * @return array Returns Returns a string array with all the active tokens of the user. To add new tokens use the tokenAdd method.    */	function tokenGet($userName, $password)	{		$params = array();		$params["userName"] = $userName;		$params["password"] = $password;		return $this->invokeMethod("tokenGet", $params);	}	/**	    * Create a new Survey based on the details provided. Return the ID of the newly created Survey.	    *	    * @section Survey Related Methods	    *	    * @example bmeapi_surveyCreate.php	    *	    * @param Array $surveyDetails The array containing the survey details.	    * Array Structure	    *  string name- This name is NOT displayed in your survey.It is for your reference only.	    *  string title -  This title appears at the top of your survey when you send it out or post it on your website.	    *  string url -  This is the page guests will be sent to when they finish the survey. (Example: http://www.yoursite.com/thanks.html).	    *  string intro - This message appears beneath the title of the survey.	    *  string logourl -  Image Url which is to be used as the Logo of the page.	    *  string questions -  optional. The number of questions in the survey	    *  string status  - optional. Status of the survey either wants to keep it online or offline	    * @return string Returns the Survey ID of the newly created survey.	    */	function surveyCreate($surveyDetails)	{		$params = array();		$params["surveyDetail"] = $surveyDetails;		return $this->invokeMethod("surveyCreate", $params);	}	/**	 	    * Update an existing Survey based on the details provided. Return the ID of the updated Survey.	 	    *	 	    * @section Survey Related Methods	 	    *	 	    * @example bmeapi_surveyUpdate.php	 	    * @param string $SurveyID update the survey for the given survey id	 	    * @param Array $surveyDetails The array containing the survey details.	 	    * Array Structure	 	    *  string name- This name is NOT displayed in your survey.It is for your reference only.	 	    *  string title -  This title appears at the top of your survey when you send it out or post it on your website.	 	    *  string url -  This is the page guests will be sent to when they finish the survey. (Example: http://www.yoursite.com/thanks.html).	 	    *  string intro - This message appears beneath the title of the survey.	 	    *  string logourl -  Image Url which is to be used as the Logo of the page.	 	    *  string questions -  optional. The number of questions in the survey	 	    *  string status  - optional. Status of the survey either wants to keep it online or offline	 	    * @return string Returns the Survey ID of the updated survey.	 	    */	function surveyUpdate($SurveyID, $surveyDetails)	{		$params = array();		$params["SurveyID"] = $SurveyID;		$params["surveyDetail"] = $surveyDetails;		return $this->invokeMethod("surveyUpdate", $params);	}	/**				* Delete a Survey of the given ID. Return the ID of the Deleted Survey.				*				* @section Survey Related Methods				*				* @example bmeapi_surveyDelete.php				*				*@param string $SurveyID The Survey ID to delete. To get all the Surveys, use the surveyGetList method.				* @return string Returns the Survey ID of the Deleted survey.				*/	function surveyDelete($SurveyID)	{		$params = array();		$params["SurveyID"] = $SurveyID;		return $this->invokeMethod("surveyDelete", $params);	}	/**	    * Get the list of surveys using the filter and paging limits, order by the name or date of the surveys.	    *	    * @section Survey Related Methods	    *	    * @example bmeapi_surveyGetList.php	    *	    * @param string $filter Show surveys where the survey name starts with the filter	    * @param string $status Fetch surveys matching a status(0 = Draft, 1 = Active, 2 = Finished)	    * @param integer $pageNumber  Fetch results from the given page number.	    * @param integer $pageSize  Number of results per page.	    * @param string $orderBy  Sort the results based on "name" or "date".	    * @param string $sortOrder  Sort the results in the "asc"ending or "desc"ending order.	    * @return array Returns an array with the results.	    * Return Array Structure	    * integer sequence - The sequence number of the record	    * string id - The ID of the survey.	    * string name - Name of the Survey	    * string questions - Number of Questions that are available in for the survey	    * string url - This is the page guests will be sent to when they finish the survey. (Example: http://www.yoursite.com/thanks.html).	    * string status - The status of the Survey. Can be 'Draft', 'Active', 'Finished'	    * string createdDate - The date on which the survey was created	    * string modifiedDate - The date on which the survey was last updated	    */	function surveyGetList($filter, $status, $pageNumber, $pageSize, $orderBy, $sortOrder)	{		$params = array();		$params["filter"] = $filter;		$params["status"] = $status;		$params["pageNumber"] = $pageNumber;		$params["pageSize"] = $pageSize;		$params["orderBy"] = $orderBy;		$params["sortOrder"] = $sortOrder;		return $this->invokeMethod("surveyGetList", $params);	}	/**		    * Get the List of surveys using the filter and paging limits, order by the name or date of the surveys.		    *		    * @section Survey Related Methods		    *		    * @example bmeapi_surveyReportList.php		    *		    * @param string $filter Show surveys where the survey name starts with the filter		    * @param string $status Fetch surveys matching a status(0 = Draft, 1 = Active, 2 = Finished)		    * @param integer $pageNumber  Fetch results from the given page number.		    * @param integer $pageSize  Number of results per page.		    * @param string $orderBy  Sort the results based on "name" or "date".		    * @param string $sortOrder  Sort the results in the "asc"ending or "desc"ending order.		    * @return array Returns an array with the results.		    * Return Array Structure		    * string Name - The name of the survey.		    * string surveyid - ID of the Survey		    * string Responses - Number of Responses for the survey		    * string name - Name of the survey		    * string questions - Number of questions available for the survey		    * string active - Active of the survey		    * string status - Status of the survey		    * string intro  - What is the message appears beneath the title of the survey.		    * string createdDate - The date on which the survey was created		    * string modifiedDate - The date on which the survey was last updated		    */	function surveyReportList($filter, $status, $pageNumber, $pageSize, $orderBy, $sortOrder)	{		$params = array();		$params["filter"] = $filter;		$params["status"] = $status;		$params["pageNumber"] = $pageNumber;		$params["pageSize"] = $pageSize;		$params["orderBy"] = $orderBy;		$params["sortOrder"] = $sortOrder;		return $this->invokeMethod("surveyReportList", $params);	}	/**			    * Get the list of Survey Questions with answers and there responses			    *			    * @section Survey Related Methods			    *			    * @example bmeapi_surveyResponseReport.php			    * @param string $SurveyID  The survey id of the survey			    * @return array Returns an array with the results.			    * Return Array Structure			    * integer sequence - The sequence number of the record			    * string questionid- The ID of the survey question.			    * string question- Question for the survey.			    * string questionoptions - Number of options available for the question			    * string questiontype - Type of the answer of the question				* string answer1- Answer1 of the question				* string answer2- Answer2 of the question				* string answer3- Answer3 of the question				* string answer4- Answer4 of the question				* string answer5- Answer5 of the question				* string answer6- Answer6 of the question				* string answer7- Answer7 of the question				* string answer8- Answer8 of the question				* string answer9- Answer9 of the question				* string answer10- Answer10 of the question			    * string required - Either to attempt it is necessary or not			    * string other -Either provide the textField for some other answer besides of the given answers			    * string comment - Provide the field for comment or not			    * string answer1count - Total number of responses in favour of answer1			    * string answer2count - Total number of responses in favour of answer2			    * string answer3count - Total number of responses in favour of answer3			    * string answer4count - Total numner of responses in favour of answer4			    * string answer5count - Total number of responses in favour of answer5			    * string answer6count - Total number of responses in favour of answer6				* string answer7count - Total number of responses in favour of answer7				* string answer8count - Total number of responses in favour of answer8				* string answer9count - Total numner of responses in favour of answer9				* string answer10count - Total number of responses in favour of answer10				* string commentcount - Total number of responses in comment				* string othercount - Total number of responses in othercount				* string textcount - Total number of responses in the textarea			    */	function surveyResponseReport($SurveyID)	{		$params = array();		$params["SurveyID"] = $SurveyID;		return $this->invokeMethod("surveyResponseReport", $params);	}	/**			    * Create a new Survey Question based on the details provided. Return the ID of the newly created Survey Question.			    *			    * @section Survey Related Methods			    *			    * @example bmeapi_surveyQuestionCreate.php			    *			    * @param Array $surveyQuestionDetails The array containing the survey questions details.			    * Array Structure			    *  string question- The Question for your survey			    *  string answer1 -  answer 1 for the question			    *  string answer2 -  answer 2 for the question			    *  string questionoptions - Number of options available for the question			    *  string questiontype -  Type of the answers			    *  string comment -  Either to use the comment text Field or not			    *  string surveyid  - The id of the survey for which you want to create the survey			    * @return string Returns the Survey Question ID of the newly created survey Question.			    */	function surveyQuestionCreate($SurveyID, $surveyQuestionDetails)	{		$params = array();		$params["SurveyID"] = $SurveyID;		$params["surveyQuestionDetail"] = $surveyQuestionDetails;		return $this->invokeMethod("surveyQuestionCreate", $params);	}	/**			    * Update an existing Survey Question based on the details provided. Return the ID of the Survey Question.			    *			    * @section Survey Related Methods			    *			    * @example bmeapi_surveyQuestionUpdate.php			    *			    * @param string $SurveyID update the question for the given survey id			    * @param Array $surveyQuestionDetails The array containing the survey questions details.			    * Array Structure			    *  string question- The Question for your survey			    *  string answer1 -  answer 1 for the question			    *  string answer2 -  answer 2 for the question			    *  string answer3 -  answer 3 for the question			    *  string answer4 -  answer 4 for the question			    *  string questionoptions - Number of options available for the question			    *  string questiontype -  Type of the answers			    *  string comment -  Either to use the comment text Field or not			    *  string surveyid  - The id of the survey for which you want to update the survey question			    *  string questionid - The id of the survey question which we want to update			    * @return string Returns the Survey Question ID of the newly created survey Question.			    */	function surveyQuestionUpdate($SurveyID, $surveyQuestionDetails)	{		$params = array();		$params["SurveyID"] = $SurveyID;		$params["surveyQuestionDetail"] = $surveyQuestionDetails;		return $this->invokeMethod("surveyQuestionUpdate", $params);	}	/**				* Delete a Survey Question of the given ID. Return the ID of the Deleted Survey Question.				*				* @section Survey Related Methods				*				* @example bmeapi_surveyQuestionDelete.php				*				*@param string $SurveyID The Survey ID of the question to be deleted. To get all the Survey Question, use the surveyGetQuestionList method.				*@param string $QuestionID The question id of the question to be deleted.				* @return string Returns the Question ID of the Deleted question.				*/	function surveyQuestionDelete($SurveyID, $QuestionID)	{		$params = array();		$params["SurveyID"] = $SurveyID;		$params["QuestionID"] = $QuestionID;		return $this->invokeMethod("surveyQuestionDelete", $params);	}	/**				    * Get the list of Survey Questions with there questions and answers				    *				    * @section Survey Related Methods				    *				    * @example bmeapi_surveyGetQuestionList.php				    * @param string $SurveyID  The survey id of the survey for which we want the question list				    * @return array Returns an array with the results.				    * Return Array Structure				    * string questionid- The ID of the survey question.				    * string question- Question for the survey.				    * string questionoptions - Number of options available for the question				    * string questiontype - Type of the answer of the question					* string answer1- Answer1 of the question					* string answer2- Answer2 of the question					* string answer3- Answer3 of the question					* string answer4- Answer4 of the question					* string answer5- Answer5 of the question					* string answer6- Answer6 of the question					* string answer7- Answer7 of the question					* string answer8- Answer8 of the question					* string answer9- Answer9 of the question					* string answer10- Answer10 of the question				    * string required - Either to attempt it is necessary or not				    * string other -Either provide the textField for some other answer besides of the given answers				    * string comment - Provide the field for comment or not				    */	function surveyGetQuestionList($SurveyID)	{		$params = array();		$params["SurveyID"] = $SurveyID;		return $this->invokeMethod("surveyGetQuestionList", $params);	}	/**					* Update a Survey Status of the given ID. Returns 1 if the survey is updated else 0.					*					* @section Survey Related Methods					*					* @example bmeapi_surveyStatusUpdate.php					*					*@param string $SurveyID The Survey ID to get update. To get all the Surveys, use the surveyGetList method.					*@param string $Status Status for the survey.					* @returns 1 if the survey is updated else 0.					*/	function surveyStatusUpdate($SurveyID, $Status)	{		$params = array();		$params["SurveyID"] = $SurveyID;		$params["Status"] = $Status;		return $this->invokeMethod("surveyStatusUpdate", $params);	}	/**			    * Update Survey Colors based on the details provided. Return the ID of the Survey.			    *			    * @section Survey Related Methods			    *			    * @example bmeapi_surveyColorUpdate.php			    *			    * @param string $SurveyID update the survey for the given survey id			    * @param Array $surveyColorDetails The array containing the survey color details.			    * Array Structure			    *  string surveyid- The survey id for which you want to update color			    *  string questionfg -  Font color of the survey question			    *  string formbg -  background color of the form			    *  string formfg -  Foreground color of the form			    *  string headerbg - Background color of the header			    *  string headerfg - Foreground color of the header			    *  string parafg - Foreground color of the paragraph			    *  string headerfont - Font for the header			    *  string headersize - Size of the header			    *  string parafont  - Font for the paragraph			    *  string parasize -  Size of the paragraph font			    *  string questionfont - Font for the question			    *  string questionsize - Size of the question			    *  string answerfont -  Font for the answer			    *  string answersize - Font Size of the answer			    *  string logoalign - Align For the Logo of the survey			    *  string introalign - Align for the intro of the survey			    *  string titlealign - Align for the title of the survey			    *  string buttontext - Text of the Survey Button			    *  string buttonalign - Align of the Survey Button			    * @return string Returns the Survey ID of the survey.			    */	function surveyColorUpdate($SurveyID, $surveyColorDetails)	{		$params = array();		$params["SurveyID"] = $SurveyID;		$params["surveyColorDetail"] = $surveyColorDetails;		return $this->invokeMethod("surveyColorUpdate", $params);	}	/**			    * Retrive All available Survey Templates			    *			    * @section Survey Related Methods			    *			    * @example bmeapi_surveyTemplateGetList.php			    *			    * @return array Returns an Array with the structure			    * Array Structure			    * string id -Template id			    * string name- Name of the Survey Template			    * string image- Image Icon of the Survey Template			    * string description- Description of the Survey Template			    * string quesCount - Number of the questions in the Current Template			    */	function surveyTemplateGetList()	{		$params = array();		return $this->invokeMethod("surveyTemplateGetList", $params);	}	/**					* Creates the copy of the already existing survey					*					* @section Survey Related Methods					*					* @example bmeapi_surveyCopy.php					*					* @param string $SurveyID survey id of the already exist survey of which you want to copy					* @param string $SurveyName name of the Newly created survey					* @return the ID of newly created Survey					*/	function surveyCopy($SurveyID, $SurveyName)	{		$params = array();		$params["SurveyID"] = $SurveyID;		$params["SurveyName"] = $SurveyName;		return $this->invokeMethod("surveyCopy", $params);	}	/**					* Creates the copy of the already existing survey Template into the new Survey					*					* @section Survey Related Methods					*					* @example bmeapi_surveyCopyTemplate.php					*					* @param string $TemplateID survey id of the already exist survey of which you want to copy					* @param string $SurveyName name of the Newly created survey					* @return the ID of newly created Survey					*/	function surveyCopyTemplate($TemplateID, $SurveyName)	{		$params = array();		$params["TemplateID"] = $TemplateID;		$params["SurveyName"] = $SurveyName;		return $this->invokeMethod("surveyCopyTemplate", $params);	}	/**					* Retrive All available Email Templates Category					*					* @section Email Related Methods					*					* @example bmeapi_emailCategoryGetList.php					*					* @return array Returns an Array with the structure					* Array Structure					* string id -Template Category id					* string name- Name of the Email Template Category					* string count- No. Of Templates in the category					* string IsNew- Either the category is New or Old					*/	function emailCategoryGetList()	{		$params = array();		return $this->invokeMethod("emailCategoryGetList", $params);	}	/**	 	    * Create a new Poll based on the details provided. Return the ID of the newly created Poll.	 	    *	 	    * @section Poll Related Methods	 	    *	 	    * @example bmeapi_pollCreate.php	 	    *	 	    * @param Array $pollDetails The array containing the poll details.	 	    * Array Structure	 	    *  string name- This will only be seen by you and is used to organize your poll.	 	    *  string question - Question for the Poll	 	    *  string answer1 - First Option for the question	 	    *  string answer2 - Second Option for the question	 	    *  string answer3 - Third Option for the question	 	    *  string answer4 - Fourth Option for the question	 	    *  string answer5 - Fifth Option for the question	 	    *  string answercolor -  Color of the answer	 	    *  string answerfont -  Font of the answer	 	    *  string borderbg - Backgroud color of the border	 	    *  string buttontext - Text which is to be appeared on the button	 	    *  string formbg - Background color of the poll's form	 	    * @return string Returns the Poll ID of the newly created poll.	 	    */	function pollCreate($pollDetails)	{		$params = array();		$params["pollDetail"] = $pollDetails;		return $this->invokeMethod("pollCreate", $params);	}	/**				* Update an existing Poll based on the details provided. Return the ID of the updated Poll.				*				* @section Poll Related Methods				*				* @example bmeapi_pollUpdate.php				*				* @param string $PollID Update the poll for the given poll id				* @param Array $pollDetails The array containing the poll details.				* Array Structure				*  string name- This will only be seen by you and is used to organize your poll.				*  string question - Question for the Poll				*  string answer1 - First Option for the question				*  string answer2 - Second Option for the question				*  string answer3 - Third Option for the question				*  string answer4 - Fourth Option for the question				*  string answer5 - Fifth Option for the question				*  string answercolor -  Color of the answer				*  string answerfont -  Font of the answer				*  string borderbg - Backgroud color of the border				*  string buttontext - Text which is to be appeared on the button				*  string formbg - Background color of the poll's form				* @return string Returns the Poll ID of the newly created poll.				*/	function pollUpdate($PollID, $pollDetails)	{		$params = array();		$params["PollID"] = $PollID;		$params["pollDetail"] = $pollDetails;		return $this->invokeMethod("pollUpdate", $params);	}	/**					* Delete a Poll of the given ID. Return the ID of the Deleted Poll.					*					* @section Poll Related Methods					*					* @example bmeapi_pollDelete.php					*					*@param string $PollID The Poll ID of the poll to be deleted. To get all the poll, use the pollGetList method.					* @return string Returns the Poll ID of the Deleted poll.					*/	function pollDelete($PollID)	{		$params = array();		$params["PollID"] = $PollID;		return $this->invokeMethod("pollDelete", $params);	}	/**	    * Get the list of polls using the filter and paging limits, order by the name or date of the polls.	    *	    * @section Poll Related Methods	    *	    * @example bmeapi_pollGetList.php	    *	    * @param string $filter Show polls where the poll name starts with the filter	    * @param string $status Fetch polls matching a status(0 = Draft, 1 = Active, 2 = Finished)	    * @param integer $pageNumber  Fetch results from the given page number.	    * @param integer $pageSize  Number of results per page.	    * @param string $orderBy  Sort the results based on "name" or "date".	    * @param string $sortOrder  Sort the results in the "asc"ending or "desc"ending order.	    * @return array Returns an array with the results.	    * Return Array Structure	    * integer sequence - The sequence number of the record	    * string id - The ID of the poll.	    * string name - Name of the Poll	    * string question - Question for the poll	    * string responses - Number of responses for the given poll	    * string answer1 - First option for the question	    * string answer2 - Second option for the question	    * string answer3 - Third option for the question	    * string answer4 - Forth option for the question	    * string answer5 - Fifth option for the question	    * string answer1Count - Number of the responses in favour of first option	    * string answer2Count - Number of the responses in favour of second option	    * string answer3Count - Number of the responses in favour of Third option	    * string answer4Count - Number of the responses in favour of Fourth option	    * string answer5Count - Number of the responses in favour of Fifthe option	    * string createdDate - The date on which the poll was created	    * string modifiedDate - The date on which the poll was last updated	    * string status - The status of the poll either Live or Finished or Draft(0 = Draft, 1 = Active, 2 = Finished)	    */	function pollGetList($filter, $status, $pageNumber, $pageSize, $orderBy, $sortOrder)	{		$params = array();		$params["filter"] = $filter;		$params["status"] = $status;		$params["pageNumber"] = $pageNumber;		$params["pageSize"] = $pageSize;		$params["orderBy"] = $orderBy;		$params["sortOrder"] = $sortOrder;		return $this->invokeMethod("pollGetList", $params);	}	/**		    * Get the List of polls using the filter and paging limits, order by the name or date of the polls.		    *		    * @section Poll Related Methods		    *		    * @example bmeapi_pollReportList.php		    *		    * @param string $filter Show polls where the poll name starts with the filter		    * @param string $status Fetch polls matching a status(0 = Draft, 1 = Active, 2 = Finished)		    * @param integer $pageNumber  Fetch results from the given page number.		    * @param integer $pageSize  Number of results per page.		    * @param string $orderBy  Sort the results based on "name" or "date".		    * @param string $sortOrder  Sort the results in the "asc"ending or "desc"ending order.		    * @return array Returns an array with the results.		    * Return Array Structure		    * string Name - The name of the poll.		    * string id - ID of the Poll		    * string responses - Number of Responses for the poll		    * string name - Name of the poll		    * string question - Question for the poll		    * string status - Status of the poll		    * string modifiedDate - The date on which the poll was last updated		    */	function pollReportList($filter, $status, $pageNumber, $pageSize, $orderBy, $sortOrder)	{		$params = array();		$params["filter"] = $filter;		$params["status"] = $status;		$params["pageNumber"] = $pageNumber;		$params["pageSize"] = $pageSize;		$params["orderBy"] = $orderBy;		$params["sortOrder"] = $sortOrder;		return $this->invokeMethod("pollReportList", $params);	}	/**			    * Get the Detail of Poll with answers and there responses			    *			    * @section Poll Related Methods			    *			    * @example bmeapi_pollResponseReport.php			    * @param string $PollID  The poll id of the poll			    * @return array Returns an array with the results.			    * Return Array Structure			    * string id- The ID of the poll.			    * string name - Name of the Poll			    * string question- Question for the poll.				* string answer1- Answer1 of the question				* string answer2- Answer2 of the question				* string answer3- Answer3 of the question				* string answer4- Answer4 of the question				* string answer5- Answer5 of the question			    * string answer1count - Total number of responses in favour of answer1			    * string answer2count - Total number of responses in favour of answer2			    * string answer3count - Total number of responses in favour of answer3			    * string answer4count - Total numner of responses in favour of answer4			    * string answer5count - Total number of responses in favour of answer5				* string responses - Total number of responses for this poll				*/	function pollResponseReport($PollID)	{		$params = array();		$params["PollID"] = $PollID;		return $this->invokeMethod("pollResponseReport", $params);	}	/**				* Update a Poll Status of the given ID. Returns 1 if the poll is updated else 0.				*				* @section Poll Related Methods				*				* @example bmeapi_pollStatusUpdate.php				*				*@param string $PollID The Poll ID to get update. To get all the Polls, use the pollGetList method.				*@param string $Status Status for the poll.				* @returns 1 if the poll is updated else 0.				*/	function pollStatusUpdate($PollID, $Status)	{		$params = array();		$params["PollID"] = $PollID;		$params["Status"] = $Status;		return $this->invokeMethod("pollStatusUpdate", $params);	}	/**				* Add a new Video based on the details provided. Return the ID of the newly Added Video.				*				* @section Video Related Methods				*				* @example bmeapi_videoCreate.php				*				* @param Array $videoStructure The array containing the video details.				* Array Structure				*  string video_embed- The url for the video page.				* @return Boolean Returns true if the video is embeded else false.				*/	function videoCreate($videoStructure)	{		$params = array();		$params["videoDetail"] = $videoStructure;		return $this->invokeMethod("videoCreate", $params);	}	/**				* Delete a Video of the given ID. Return the ID of the Deleted Video.				*				* @section Video Related Methods				*				* @example bmeapi_videoDelete.php				*				*@param string $VideoID The Video ID to be deleted. To get all the video, use the GetVideoGalleryList method.				* @return string Returns the ID of the deleted video.				*/	function videoDelete($VideoID)	{		$params = array();		$params["VideoID"] = $VideoID;		return $this->invokeMethod("videoDelete", $params);	}	/**			    * Get all the videos of the current client list.			    *			    * @section Video Related Methods			    *			    * @example bmeapi_videoGetList.php			    * @param integer $pageNumber  Fetch results from the given page number.		    	* @param integer $pageSize  Number of results per page.			    * @return array Returns an array with the results.			    * Return Array Structure			    * string id- The ID of the Video.			    * string video_name - Name of the Video			    * string video_description- Description of the video				* string video_embed- Source url of the video				* string video_height - Height of the video				* string video_image - Image of the video				* string video_width- width of the video				* string createddatetime- Created date of the video			    */	function videoGetList($pageNumber, $pageSize)	{		$params = array();		$params["pageNumber"] = $pageNumber;		$params["pageSize"] = $pageSize;		return $this->invokeMethod("videoGetList", $params);	}	/**/	function imageGetList($pageNumber, $pageSize)	{		$params = array();		$params["pageNumber"] = $pageNumber;		$params["pageSize"] = $pageSize;		return $this->invokeMethod("imageGetList", $params);	}	/**/	function imageGetCount()	{		$params = array();		return $this->invokeMethod("imageGetCount", $params);	}	/**/	function imageGet($imageID)	{		$params = array();		$params["ImageID"] = $imageID;		return $this->invokeMethod("imageGet", $params);	}	/**/	function ImageDelete($imageID)	{		$params = array();		$params["ImageID"] = $imageID;		return $this->invokeMethod("ImageDelete", $params);	}	/**/	function listGetContactFields($listID)	{		$params = array();		$params["listid"] = $listID;		return $this->invokeMethod("listGetContactFields", $params);	}	/**/	function listGetContactsCount($listID, $filter)	{		$params = array();		$params["listid"] = $listID;		$params["filter"] = $filter;		return $this->invokeMethod("listGetContactsCount", $params);	}	/**/	function listGetCount($filter)	{		$params = array();		$params["filter"] = $filter;		return $this->invokeMethod("listGetCount", $params);	}	/**/	function videoGet($videoID)	{		$params = array();		$params["videoid"] = $videoID;		return $this->invokeMethod("videoGet", $params);	}	/**/	function videoGetCount()	{		$params = array();		return $this->invokeMethod("videoGetCount", $params);	}	/**			    * Create a new SignUpForm based on the details provided. Return the ID of the newly created SignUpForms.			    *			    * @section SignUpForm Related Methods			    *			    * @example bmeapi_signupFormCreate.php			    *			    * @param Array $signUpFormDetails The array containing the SignUpForm details.			    * Array Structure			    *  string name- This name is NOT displayed in your singup form.It is for your reference only.			    *  string lists -  Contact details of the the contacts.(for ex. id,name etc)			    *  string introduction -  Introduction for your signupForm. (Example: http://www.yoursite.com/thanks.html).			    *  string title - Title for the SignUpForm .			    *  string logo -  Image Url which is to be used as the Logo of the page.			    * @return string Returns the Survey ID of the newly created survey.			    */	function signupFormCreate($signUpFormDetails)	{		$params = array();		$params["signupFormDetail"] = $signUpFormDetails;		return $this->invokeMethod("signupFormCreate", $params);	}	/**			    * Update an Existing SignUpForm based on the details provided. Return 1 if it updated else 0.			    *			    * @section SignUpForm Related Methods			    *			    * @example bmeapi_signupFormUpdate.php			    *			    * @param Array $signUpFormDetails The array containing the SignUpForm details.			    * Array Structure			    *  string name- This name is NOT displayed in your singup form.It is for your reference only.			    *  string lists -  Contact details of the the contacts.(for ex. id,name etc)			    *  string introduction -  Introduction for your signupForm. (Example: http://www.yoursite.com/thanks.html).			    *  string title - Title for the SignUpForm .			    *  string logo -  Image Url which is to be used as the Logo of the page.			    * @return boolean Returns true if the signupForm updated else false.			    */	function signupFormUpdate($signupFormID, $signUpFormDetails)	{		$params = array();		$params["signupFormID"] = $signupFormID;		$params["signupFormDetail"] = $signUpFormDetails;		return $this->invokeMethod("signupFormUpdate", $params);	}	/**				* Update an Existing SignUpForm's Color based on the details provided. Return 1 if it updated else 0.				*				* @section SignUpForm Related Methods				*				* @example bmeapi_signupFormUpdateColor.php				*				* @param Array $signUpFormDetails The array containing the SignUpForm details.				* Array Structure				*  string border- This name is NOT displayed in your singup form.It is for your reference only.				*  string formFont -  Contact details of the the contacts.(for ex. id,name etc)				*  string formSize -  Introduction for your signupForm. (Example: http://www.yoursite.com/thanks.html).				*  string introAlign - Title for the SignUpForm .				*  string formBackground -  Image Url which is to be used as the Logo of the page.				*  string form -  Foreground color of the form				*  string para - Foreground color of the paragraph				*  string parafont  - Font for the paragraph				*  string parasize -  Size of the paragraph font				*  string paraBackground- Background color of the paragraph				*  string headerBackground - Background color of the header				*  string header - Foreground color of the header				*  string headerfont - Font for the header				*  string headersize - Size of the header				*  string logoalign - Align For the Logo of the signupForm				*  string width - width of the signupForm				*  string titlealign - Align for the title of the signupForm				*  string button - Text of the signupForm Button			    *  string buttonalign - Align of the signupForm Button				* @return boolean Returns true if the signupForm updated else false.				*/	function signupFormUpdateColor($signUpFormID, $signUpFormDetails)	{		$params = array();		$params["signupFormID"] = $signUpFormID;		$params["signupFormDetail"] = $signUpFormDetails;		return $this->invokeMethod("signupFormUpdateColor", $params);	}	/**	 			    * Update an Existing SignUpForm based on the details provided. Return 1 if it updated else 0.	 			    *	 			    * @section SignUpForm Related Methods	 			    *	 			    * @example bmeapi_signupFormUpdateMessage.php	 			    *	 			    * @param Array $signUpFormDetails The array containing the SignUpForm details.	 			    * Array Structure	 			    *  string welcomeEmailFromName- From Name in the Email.	 			    *  string welcomeEmailFromEmail -  From Email in the Email	 			    *  string welcomeEmailSubject -  Email Subject in the Email	 			    *  string welcomeEmailMessage - Message in the email.	 			    *  string welcomeEmailConfirmationText -  Text which will appear in the email on which user will Click for confirm	 			    *  string welcomeEmailSignature - Signatue for the email	 			    *  string successRedirectURL - Url on which user will transfered after successing the SignUp process	 			    * @return boolean Returns true if the signupForm updated else false.	 			    */	function signupFormUpdateMessage($singUpFormID, $signUpFormDetails)	{		$params = array();		$params["signupFormID"] = $singUpFormID;		$params["signupFormDetail"] = $signUpFormDetails;		return $this->invokeMethod("signupFormUpdateMessage", $params);	}	/**					* Update an Existing SignUpForm based on the details provided. Return 1 if it updated else 0.					*					* @section SignUpForm Related Methods					*					* @example bmeapi_signupFormGetCode.php					*					* @param string $SignUpFormID ID of the signUpForm					* @param string $type type of the code					* @return code for the sign up form					*/	function signupFormGetCode($singUpFormID, $codeType)	{		$params = array();		$params["signupFormID"] = $singUpFormID;		$params["codeType"] = $codeType;		return $this->invokeMethod("signupFormGetCode", $params);	}	/**					* Gets the SignUpForm details.					*					* @section SignUpForm Related Methods					*					* @example bmeapi_signupFormGet.php					*					* @param string $SignUpFormID ID of the signUpForm					* @return Array Structure					*  string welcomeEmailFromName- From Name in the Email.					*  string welcomeEmailFromEmail -  From Email in the Email					*  string welcomeEmailSubject -  Email Subject in the Email					*  string welcomeEmailMessage - Message in the email.					*  string welcomeEmailConfirmationText -  Text which will appear in the email on which user will Click for confirm					*  string welcomeEmailSignature - Signatue for the email					*  string successRedirectURL - Url on which user will transfered after successing the SignUp process					* @return boolean Returns true if the signupForm updated else false.					*/	function signupFormGet($singUpFormID)	{		$params = array();		$params["signupFormID"] = $singUpFormID;		return $this->invokeMethod("signupFormGet", $params);	}	/**	 					* Delete the SignUpForm based on the details Provided.	 					*	 					* @section SignUpForm Related Methods	 					*	 					* @example bmeapi_signupFormDelete.php	 					*	 					* @param string $SignUpFormID ID of the signUpForm	 					* @return boolean Returns true if the signupForm deleted else false.	 					*/	function signupFormDelete($signUpFormID)	{		$params = array();		$params["signupFormID"] = $signUpFormID;		return $this->invokeMethod("signupFormDelete", $params);	}}?>